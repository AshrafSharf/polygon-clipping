{"version":3,"file":"polygon-clipping.umd.min.js","sources":["../node_modules/splaytree/index.js","../src/bbox.js","../src/flp.js","../src/vector.js","../src/rounder.js","../src/clean-input.js","../src/sweep-event.js","../src/segment.js","../src/geom-in.js","../src/geom-out.js","../src/sweep-line.js","../src/operation.js","../src/index.js"],"sourcesContent":["/* follows \"An implementation of top-down splaying\"\n * by D. Sleator <sleator@cs.cmu.edu> March 1992\n */\n\n/**\n * @typedef {*} Key\n */\n\n\n/**\n * @typedef {*} Value\n */\n\n\n/**\n * @typedef {function(node:Node):void} Visitor\n */\n\n\n/**\n * @typedef {function(a:Key, b:Key):number} Comparator\n */\n\n\n/**\n * @param {function(node:Node):string} NodePrinter\n */\n\n\n/**\n * @typedef {Object}  Node\n * @property {Key}    Key\n * @property {Value=} data\n * @property {Node}   left\n * @property {Node}   right\n */\n\nclass Node {\n\n  constructor (key, data) {\n    this.key    = key;\n    this.data   = data;\n    this.left   = null;\n    this.right  = null;\n  }\n}\n\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n\n/**\n * Simple top down splay, not requiring i to be in the tree t.\n * @param {Key} i\n * @param {Node?} t\n * @param {Comparator} comparator\n */\nfunction splay (i, t, comparator) {\n  if (t === null) return t;\n  let l, r, y;\n  const N = new Node();\n  l = r = N;\n\n  while (true) {\n    const cmp = comparator(i, t.key);\n    //if (i < t.key) {\n    if (cmp < 0) {\n      if (t.left === null) break;\n      //if (i < t.left.key) {\n      if (comparator(i, t.left.key) < 0) {\n        y = t.left;                           /* rotate right */\n        t.left = y.right;\n        y.right = t;\n        t = y;\n        if (t.left === null) break;\n      }\n      r.left = t;                               /* link right */\n      r = t;\n      t = t.left;\n    //} else if (i > t.key) {\n    } else if (cmp > 0) {\n      if (t.right === null) break;\n      //if (i > t.right.key) {\n      if (comparator(i, t.right.key) > 0) {\n        y = t.right;                          /* rotate left */\n        t.right = y.left;\n        y.left = t;\n        t = y;\n        if (t.right === null) break;\n      }\n      l.right = t;                              /* link left */\n      l = t;\n      t = t.right;\n    } else {\n      break;\n    }\n  }\n  /* assemble */\n  l.right = t.left;\n  r.left = t.right;\n  t.left = N.right;\n  t.right = N.left;\n  return t;\n}\n\n\n/**\n * @param  {Key}        i\n * @param  {Value}      data\n * @param  {Comparator} comparator\n * @param  {Tree}       tree\n * @return {Node}      root\n */\nfunction insert (i, data, t, comparator, tree) {\n  const node = new Node(i, data);\n\n  tree._size++;\n\n  if (t === null) {\n    node.left = node.right = null;\n    return node;\n  }\n\n  t = splay(i, t, comparator);\n  const cmp = comparator(i, t.key);\n  if (cmp < 0) {\n    node.left = t.left;\n    node.right = t;\n    t.left = null;\n  } else if (cmp >= 0) {\n    node.right = t.right;\n    node.left = t;\n    t.right = null;\n  }\n  return node;\n}\n\n\n/**\n * Insert i into the tree t, unless it's already there.\n * @param  {Key}        i\n * @param  {Value}      data\n * @param  {Comparator} comparator\n * @param  {Tree}       tree\n * @return {Node}       root\n */\nfunction add (i, data, t, comparator, tree) {\n  const node = new Node(i, data);\n\n  if (t === null) {\n    node.left = node.right = null;\n    tree._size++;\n    return node;\n  }\n\n  t = splay(i, t, comparator);\n  const cmp = comparator(i, t.key);\n  if (cmp === 0) return t;\n  else {\n    if (cmp < 0) {\n      node.left = t.left;\n      node.right = t;\n      t.left = null;\n    } else if (cmp > 0) {\n      node.right = t.right;\n      node.left = t;\n      t.right = null;\n    }\n    tree._size++;\n    return node;\n  }\n}\n\n\n/**\n * Deletes i from the tree if it's there\n * @param {Key}        i\n * @param {Tree}       tree\n * @param {Comparator} comparator\n * @param {Tree}       tree\n * @return {Node}      new root\n */\nfunction remove (i, t, comparator, tree) {\n  let x;\n  if (t === null) return null;\n  t = splay(i, t, comparator);\n  var cmp = comparator(i, t.key);\n  if (cmp === 0) {               /* found it */\n    if (t.left === null) {\n      x = t.right;\n    } else {\n      x = splay(i, t.left, comparator);\n      x.right = t.right;\n    }\n    tree._size--;\n    return x;\n  }\n  return t;                         /* It wasn't there */\n}\n\n\nfunction split (key, v, comparator) {\n  let left, right;\n  if (v === null) {\n    left = right = null;\n  } else {\n    v = splay(key, v, comparator);\n\n    const cmp = comparator(v.key, key);\n    if (cmp === 0) {\n      left  = v.left;\n      right = v.right;\n    } else if (cmp < 0) {\n      right   = v.right;\n      v.right = null;\n      left    = v;\n    } else {\n      left   = v.left;\n      v.left = null;\n      right  = v;\n    }\n  }\n  return { left, right };\n}\n\n\nfunction merge (left, right, comparator) {\n  if (right === null) return left;\n  if (left  === null) return right;\n\n  right = splay(left.key, right, comparator);\n  right.left = left;\n  return right;\n}\n\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Array<string>}               out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction printRow (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  printRow(root.left,  indent, false, out, printNode);\n    if (root.right) printRow(root.right, indent, true,  out, printNode);\n  }\n}\n\n\nexport default class Tree {\n\n  constructor (comparator = DEFAULT_COMPARE) {\n    this._comparator = comparator;\n    this._root = null;\n    this._size = 0;\n  }\n\n\n  /**\n   * Inserts a key, allows duplicates\n   * @param  {Key}    key\n   * @param  {Value=} data\n   * @return {Node|null}\n   */\n  insert (key, data) {\n    return this._root = insert(key, data, this._root, this._comparator, this);\n  }\n\n\n  /**\n   * Adds a key, if it is not present in the tree\n   * @param  {Key}    key\n   * @param  {Value=} data\n   * @return {Node|null}\n   */\n  add (key, data) {\n    return this._root = add(key, data, this._root, this._comparator, this);\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Node|null}\n   */\n  remove (key) {\n    this._root = remove(key, this._root, this._comparator, this);\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    let node = this._root;\n    if (node) {\n      while (node.left) node = node.left;\n      this._root = splay(node.key,  this._root, this._comparator);\n      this._root = remove(node.key, this._root, this._comparator, this);\n      return { key: node.key, data: node.data };\n    }\n    return null;\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Node|null}\n   */\n  findStatic (key) {\n    let current   = this._root;\n    const compare = this._comparator;\n    while (current) {\n      const cmp = compare(key, current.key);\n      if (cmp === 0)    return current;\n      else if (cmp < 0) current = current.left;\n      else              current = current.right;\n    }\n    return null;\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Node|null}\n   */\n  find (key) {\n    if (this._root) {\n      this._root = splay(key, this._root, this._comparator);\n      if (this._comparator(key, this._root.key) !== 0) return null;\n    }\n    return this._root;\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Boolean}\n   */\n  contains (key) {\n    let current   = this._root;\n    const compare = this._comparator;\n    while (current) {\n      const cmp = compare(key, current.key);\n      if (cmp === 0)    return true;\n      else if (cmp < 0) current = current.left;\n      else              current = current.right;\n    }\n    return false;\n  }\n\n\n  /**\n   * @param  {Visitor} visitor\n   * @param  {*=}      ctx\n   * @return {SplayTree}\n   */\n  forEach (visitor, ctx) {\n    let current = this._root;\n    const Q = [];  /* Initialize stack s */\n    let done = false;\n\n    while (!done) {\n      if (current !==  null) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length !== 0) {\n          current = Q.pop();\n          visitor.call(ctx, current);\n\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range (low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Returns array of keys\n   * @return {Array<Key>}\n   */\n  keys () {\n    const keys = [];\n    this.forEach(({ key }) => keys.push(key));\n    return keys;\n  }\n\n\n  /**\n   * Returns array of all the data in the nodes\n   * @return {Array<Value>}\n   */\n  values () {\n    const values = [];\n    this.forEach(({ data }) => values.push(data));\n    return values;\n  }\n\n\n  /**\n   * @return {Key|null}\n   */\n  min() {\n    if (this._root) return this.minNode(this._root).key;\n    return null;\n  }\n\n\n  /**\n   * @return {Key|null}\n   */\n  max() {\n    if (this._root) return this.maxNode(this._root).key;\n    return null;\n  }\n\n\n  /**\n   * @return {Node|null}\n   */\n  minNode(t = this._root) {\n    if (t) while (t.left) t = t.left;\n    return t;\n  }\n\n\n  /**\n   * @return {Node|null}\n   */\n  maxNode(t = this._root) {\n    if (t) while (t.right) t = t.right;\n    return t;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    let current = this._root, done = false, i = 0;\n    const Q = [];\n\n    while (!done) {\n      if (current) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length > 0) {\n          current = Q.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * @param  {Node}   d\n   * @return {Node|null}\n   */\n  next (d) {\n    let root = this._root;\n    let successor = null;\n\n    if (d.right) {\n      successor = d.right;\n      while (successor.left) successor = successor.left;\n      return successor;\n    }\n\n    const comparator = this._comparator;\n    while (root) {\n      const cmp = comparator(d.key, root.key);\n      if (cmp === 0) break;\n      else if (cmp < 0) {\n        successor = root;\n        root = root.left;\n      } else root = root.right;\n    }\n\n    return successor;\n  }\n\n\n  /**\n   * @param  {Node} d\n   * @return {Node|null}\n   */\n  prev (d) {\n    let root = this._root;\n    let predecessor = null;\n\n    if (d.left !== null) {\n      predecessor = d.left;\n      while (predecessor.right) predecessor = predecessor.right;\n      return predecessor;\n    }\n\n    const comparator = this._comparator;\n    while (root) {\n      const cmp = comparator(d.key, root.key);\n      if (cmp === 0) break;\n      else if (cmp < 0) root = root.left;\n      else {\n        predecessor = root;\n        root = root.right;\n      }\n    }\n    return predecessor;\n  }\n\n\n  /**\n   * @return {SplayTree}\n   */\n  clear() {\n    this._root = null;\n    this._size = 0;\n    return this;\n  }\n\n\n  /**\n   * @return {NodeList}\n   */\n  toList() {\n    return toList(this._root);\n  }\n\n\n  /**\n   * Bulk-load items. Both array have to be same size\n   * @param  {Array<Key>}    keys\n   * @param  {Array<Value>}  [values]\n   * @param  {Boolean}       [presort=false] Pre-sort keys and values, using\n   *                                         tree's comparator. Sorting is done\n   *                                         in-place\n   * @return {AVLTree}\n   */\n  load (keys = [], values = [], presort = false) {\n    let size = keys.length;\n    const comparator = this._comparator;\n\n    // sort if needed\n    if (presort) sort(keys, values, 0, size - 1, comparator);\n\n    if (this._root === null) { // empty tree\n      this._root = loadRecursive(this._root, keys, values, 0, size);\n      this._size = size;\n    } else { // that re-builds the whole tree from two in-order traversals\n      const mergedList = mergeLists(this.toList(), createList(keys, values), comparator);\n      size = this._size + size;\n      this._root = sortedListToBST({ head: mergedList }, 0, size);\n    }\n    return this;\n  }\n\n\n  /**\n   * @return {Boolean}\n   */\n  isEmpty() { return this._root === null; }\n\n  get size () { return this._size; }\n\n\n  /**\n   * @param  {NodePrinter=} printNode\n   * @return {String}\n   */\n  toString (printNode = (n) => n.key) {\n    const out = [];\n    printRow(this._root, '', true, (v) => out.push(v), printNode);\n    return out.join('');\n  }\n\n\n  update (key, newKey, newData) {\n    const comparator = this._comparator;\n    let { left, right } = split(key, this._root, comparator);\n    this._size--;\n    if (comparator(key, newKey) < 0) {\n      right = insert(newKey, newData, right, comparator, this);\n    } else {\n      left = insert(newKey, newData, left, comparator, this);\n    }\n    this._root = merge(left, right, comparator);\n  }\n\n\n  split(key) {\n    return split(key, this._root, this._comparator);\n  }\n}\n\n\nfunction loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\n\nfunction createList(keys, values) {\n  const head = { next: null };\n  let p = head;\n  for (let i = 0; i < keys.length; i++) {\n    p = p.next = { key: keys[i], data: values[i] };\n  }\n  p.next = null;\n  return head.next;\n}\n\n\nfunction toList (root) {\n  var current = root;\n  var Q = [], done = false;\n\n  const head = { next: null };\n  let p = head;\n\n  while (!done) {\n    if (current) {\n      Q.push(current);\n      current = current.left;\n    } else {\n      if (Q.length > 0) {\n        current = p = p.next = Q.pop();\n        current = current.right;\n      } else done = true;\n    }\n  }\n  p.next = null; // that'll work even if the tree was empty\n  return head.next;\n}\n\n\nfunction sortedListToBST(list, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const left = sortedListToBST(list, start, middle);\n\n    const root = list.head;\n    root.left = left;\n\n    list.head = list.head.next;\n\n    root.right = sortedListToBST(list, middle + 1, end);\n    return root;\n  }\n  return null;\n}\n\n\nfunction mergeLists (l1, l2, compare = (a, b) => a - b) {\n  const head = {}; // dummy\n  let p = head;\n\n  let p1 = l1;\n  let p2 = l2;\n\n  while (p1 !== null && p2 !== null) {\n    if (compare(p1.key, p2.key) < 0) {\n      p.next = p1;\n      p1 = p1.next;\n    } else {\n      p.next = p2;\n      p2 = p2.next;\n    }\n    p = p.next;\n  }\n\n  if (p1 !== null)      p.next = p1;\n  else if (p2 !== null) p.next = p2;\n\n  return head.next;\n}\n\n\nfunction sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n","/**\n * A bounding box has the format:\n *\n *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }\n *\n */\n\nexport const isInBbox = (bbox, point) => {\n  return (\n    (bbox.ll.x <= point.x) &&\n    (point.x <= bbox.ur.x) &&\n    (bbox.ll.y <= point.y) &&\n    (point.y <= bbox.ur.y)\n  )\n}\n\n/* Returns either null, or a bbox (aka an ordered pair of points)\n * If there is only one point of overlap, a bbox with identical points\n * will be returned */\nexport const getBboxOverlap = (b1, b2) => {\n  // check if the bboxes overlap at all\n  if (\n    b2.ur.x < b1.ll.x ||\n    b1.ur.x < b2.ll.x ||\n    b2.ur.y < b1.ll.y ||\n    b1.ur.y < b2.ll.y\n  ) return null\n\n  // find the middle two X values\n  const lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x\n  const upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x\n\n  // find the middle two Y values\n  const lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y\n  const upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y\n\n  // put those middle values together to get the overlap\n  return { ll: { x: lowerX, y: lowerY }, ur: { x: upperX, y: upperY } }\n}\n","/* Javascript doesn't do integer math. Everything is\n * floating point with percision Number.EPSILON.\n *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n */\n\nlet epsilon = Number.EPSILON\n\n// IE Polyfill\nif (epsilon === undefined) epsilon = Math.pow(2, -52)\n\nconst EPSILON_SQ = epsilon * epsilon\n\n/* FLP comparator */\nexport const cmp = (a, b) => {\n  // check if they're both 0\n  if (-epsilon < a && a < epsilon) {\n    if (-epsilon < b && b < epsilon) {\n      return 0\n    }\n  }\n\n  // check if one is positive and the other negative\n  if (a < 0 && 0 < b) return -1\n  if (b < 0 && 0 < a) return 1\n\n  // check if they're flp equal\n  const ab = a - b\n  if (ab * ab < EPSILON_SQ * a * b) {\n    return 0\n  }\n\n  // normal comparison\n  return a < b ? -1 : 1\n}\n","import { cmp } from './flp'\n\n/* Cross Product of two vectors with first point at origin */\nexport const crossProduct = (a, b) => a.x * b.y - a.y * b.x\n\n/* Dot Product of two vectors with first point at origin */\nexport const dotProduct = (a, b) => a.x * b.x + a.y * b.y\n\n/* Comparator for two vectors with same starting point */\nexport const compareVectorAngles = (basePt, endPt1, endPt2) => {\n  const v1 = { x: endPt1.x - basePt.x, y: endPt1.y - basePt.y }\n  const v2 = { x: endPt2.x - basePt.x, y: endPt2.y - basePt.y }\n  const kross = crossProduct(v1, v2)\n  return cmp(kross, 0)\n}\n\nexport const length = v => Math.sqrt(dotProduct(v, v))\n\n/* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const sineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y }\n  const vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y }\n  return crossProduct(vAngle, vBase) / length(vAngle) / length(vBase)\n}\n\n/* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const cosineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y }\n  const vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y }\n  return dotProduct(vAngle, vBase) / length(vAngle) / length(vBase)\n}\n\n/* Get the closest point on an line (defined by two points)\n * to another point. */\nexport const closestPoint = (ptA1, ptA2, ptB) => {\n  if (ptA1.x === ptA2.x) return { x: ptA1.x, y: ptB.y } // vertical vector\n  if (ptA1.y === ptA2.y) return { x: ptB.x, y: ptA1.y } // horizontal vector\n\n  // determinne which point is further away\n  // we use the further point as our base in the calculation, so that the\n  // vectors are more parallel, providing more accurate dot product\n  const v1 = { x: ptB.x - ptA1.x, y: ptB.y - ptA1.y }\n  const v2 = { x: ptB.x - ptA2.x, y: ptB.y - ptA2.y }\n  let vFar, vA, farPt\n  if (dotProduct(v1, v1) > dotProduct(v2, v2)) {\n    vFar = v1\n    vA = { x: ptA2.x - ptA1.x, y: ptA2.y - ptA1.y }\n    farPt = ptA1\n  }\n  else {\n    vFar = v2\n    vA = { x: ptA1.x - ptA2.x, y: ptA1.y - ptA2.y }\n    farPt = ptA2\n  }\n\n  const dist = dotProduct(vA, vFar) / dotProduct(vA, vA)\n  return { x: farPt.x + dist * vA.x, y: farPt.y + dist * vA.y }\n}\n\n/* Get the x coordinate where the given line (defined by a point and vector)\n * crosses the horizontal line with the given y coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const horizontalIntersection = (pt, v, y) => {\n  if (v.y === 0) return null\n  return { x: pt.x + v.x / v.y * ( y - pt.y ), y: y }\n}\n\n/* Get the y coordinate where the given line (defined by a point and vector)\n * crosses the vertical line with the given x coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const verticalIntersection = (pt, v, x) => {\n  if (v.x === 0) return null\n  return { x: x, y: pt.y + v.y / v.x * ( x - pt.x ) }\n}\n\n/* Get the intersection of two lines, each defined by a base point and a vector.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const intersection = (pt1, v1, pt2, v2) => {\n  // take some shortcuts for vertical and horizontal lines\n  // this also ensures we don't calculate an intersection and then discover\n  // it's actually outside the bounding box of the line\n  if (v1.x === 0) return verticalIntersection(pt2, v2, pt1.x)\n  if (v2.x === 0) return verticalIntersection(pt1, v1, pt2.x)\n  if (v1.y === 0) return horizontalIntersection(pt2, v2, pt1.y)\n  if (v2.y === 0) return horizontalIntersection(pt1, v1, pt2.y)\n\n  // General case for non-overlapping segments.\n  // This algorithm is based on Schneider and Eberly.\n  // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244\n\n  const kross = crossProduct(v1, v2)\n  if (kross == 0) return null\n\n  const ve = { x: pt2.x - pt1.x, y: pt2.y - pt1.y }\n  const d1 = crossProduct(ve, v1) / kross\n  const d2 = crossProduct(ve, v2) / kross\n\n  // take the average of the two calculations to minimize rounding error\n  const x1 = pt1.x + d2 * v1.x, x2 = pt2.x + d1 * v2.x\n  const y1 = pt1.y + d2 * v1.y, y2 = pt2.y + d1 * v2.y\n  const x = (x1 + x2) / 2\n  const y = (y1 + y2) / 2\n  return { x: x, y: y }\n}\n\n/* Given a vector, return one that is perpendicular */\nexport const perpendicular = (v) => {\n  return { x: -v.y, y: v.x }\n}\n","import { cmp } from './flp'\nimport SplayTree from 'splaytree'\n\n/**\n * This class rounds incoming values sufficiently so that\n * floating points problems are, for the most part, avoided.\n *\n * Incoming points are have their x & y values tested against\n * all previously seen x & y values. If either is 'too close'\n * to a previously seen value, it's value is 'snapped' to the\n * previously seen value.\n *\n * All points should be rounded by this class before being\n * stored in any data structures in the rest of this algorithm.\n */\n\nclass PtRounder {\n  constructor () {\n    this.reset()\n  }\n\n  reset () {\n    this.xRounder = new CoordRounder()\n    this.yRounder = new CoordRounder()\n  }\n\n  round (x, y) {\n    return {\n      x: this.xRounder.round(x),\n      y: this.yRounder.round(y),\n    }\n  }\n}\n\nclass CoordRounder {\n  constructor () {\n    this.tree = new SplayTree()\n    // preseed with 0 so we don't end up with values < Number.EPSILON\n    this.round(0)\n  }\n\n  // Note: this can rounds input values backwards or forwards.\n  //       You might ask, why not restrict this to just rounding\n  //       forwards? Wouldn't that allow left endpoints to always\n  //       remain left endpoints during splitting (never change to\n  //       right). No - it wouldn't, because we snap intersections\n  //       to endpoints (to establish independence from the segment\n  //       angle for t-intersections).\n  round (coord) {\n    const node = this.tree.add(coord)\n\n    const prevNode = this.tree.prev(node)\n    if (prevNode !== null && cmp(node.key, prevNode.key) === 0) {\n      this.tree.remove(coord)\n      return prevNode.key\n    }\n\n    const nextNode = this.tree.next(node)\n    if (nextNode !== null && cmp(node.key, nextNode.key) === 0) {\n      this.tree.remove(coord)\n      return nextNode.key\n    }\n\n    return coord\n  }\n}\n\n// singleton available by import\nconst rounder = new PtRounder()\n\nexport default rounder\n","import { compareVectorAngles } from './vector'\nimport rounder from './rounder'\n\n/* Given input geometry as a standard array-of-arrays geojson-style\n * geometry, return one that uses objects as points, for better perf */\nexport const pointsAsObjects = geom => {\n  // we can handle well-formed multipolys and polys\n  const output = []\n  if (!Array.isArray(geom)) {\n    throw new Error('Input is not a Polygon or MultiPolygon')\n  }\n  for (let i = 0, iMax = geom.length; i < iMax; i++) {\n    if (!Array.isArray(geom[i]) || geom[i].length == 0) {\n      throw new Error('Input is not a Polygon or MultiPolygon')\n    }\n    output.push([])\n    for (let j = 0, jMax = geom[i].length; j < jMax; j++) {\n      if (!Array.isArray(geom[i][j]) || geom[i][j].length == 0) {\n        throw new Error('Input is not a Polygon or MultiPolygon')\n      }\n      if (Array.isArray(geom[i][j][0])) { // multipolygon\n        output[i].push([])\n        for (let k = 0, kMax = geom[i][j].length; k < kMax; k++) {\n          if (!Array.isArray(geom[i][j][k]) || geom[i][j][k].length < 2) {\n            throw new Error('Input is not a Polygon or MultiPolygon')\n          }\n          if (geom[i][j][k].length > 2) {\n            throw new Error(\n              'Input has more than two coordinates. ' +\n              'Only 2-dimensional polygons supported.'\n            )\n          }\n          output[i][j].push(rounder.round(geom[i][j][k][0], geom[i][j][k][1]))\n        }\n      } else { // polygon\n        if (geom[i][j].length < 2) {\n          throw new Error('Input is not a Polygon or MultiPolygon')\n        }\n        if (geom[i][j].length > 2) {\n          throw new Error(\n            'Input has more than two coordinates. ' +\n            'Only 2-dimensional polygons supported.'\n          )\n        }\n        output[i].push(rounder.round(geom[i][j][0], geom[i][j][1]))\n      }\n    }\n  }\n  return output\n}\n\n/* WARN: input modified directly */\nexport const forceMultiPoly = geom => {\n  if (Array.isArray(geom)) {\n    if (geom.length === 0) return // allow empty multipolys\n\n    if (Array.isArray(geom[0])) {\n      if (Array.isArray(geom[0][0])) {\n        if (\n          typeof geom[0][0][0].x === 'number' &&\n          typeof geom[0][0][0].y === 'number'\n        ) {\n          // multipolygon\n          return\n        }\n      }\n      if (\n        typeof geom[0][0].x === 'number' &&\n        typeof geom[0][0].y === 'number'\n      ) {\n        // polygon\n        geom.unshift(geom.splice(0))\n        return\n      }\n    }\n  }\n  throw new Error('Unrecognized input - not a polygon nor multipolygon')\n}\n\n/* WARN: input modified directly */\nexport const cleanMultiPoly = multipoly => {\n  let i = 0\n  while (i < multipoly.length) {\n    const poly = multipoly[i]\n    if (poly.length === 0) {\n      multipoly.splice(i, 1)\n      continue\n    }\n\n    const exteriorRing = poly[0]\n    cleanRing(exteriorRing)\n    // poly is dropped if exteriorRing is degenerate\n    if (exteriorRing.length === 0) {\n      multipoly.splice(i, 1)\n      continue\n    }\n\n    let j = 1\n    while (j < poly.length) {\n      const interiorRing = poly[j]\n      cleanRing(interiorRing)\n      if (interiorRing.length === 0) poly.splice(j, 1)\n      else j++\n    }\n\n    i++\n  }\n}\n\n/* Clean ring:\n *  - remove duplicate points\n *  - remove colinear points\n *  - remove rings with no area (less than 3 distinct points)\n *  - un-close rings (last point should not repeat first)\n *\n * WARN: input modified directly */\nexport const cleanRing = ring => {\n  if (ring.length === 0) return\n  const firstPt = ring[0]\n  const lastPt = ring[ring.length - 1]\n  if (firstPt.x === lastPt.x && firstPt.y === lastPt.y) ring.pop()\n\n  const isPointUncessary = (prevPt, pt, nextPt) =>\n    (prevPt.x === pt.x && prevPt.y === pt.y) ||\n    (nextPt.x === pt.x && nextPt.y === pt.y) ||\n    compareVectorAngles(pt, prevPt, nextPt) === 0\n\n  let i = 0\n  let prevPt, nextPt\n  while (i < ring.length) {\n    prevPt = (i === 0 ? ring[ring.length - 1] : ring[i - 1])\n    nextPt = (i === ring.length - 1 ? ring[0] : ring[i + 1])\n    if (isPointUncessary(prevPt, ring[i], nextPt)) ring.splice(i, 1)\n    else i++\n  }\n\n  // if our ring has less than 3 distinct points now (so is degenerate)\n  // shrink it down to the empty array to communicate to our caller to\n  // drop it\n  while (ring.length < 3 && ring.length > 0) ring.pop()\n}\n","import Segment from './segment'\nimport { cosineOfAngle, sineOfAngle } from './vector'\n\nexport default class SweepEvent {\n\n  // for ordering sweep events in the sweep event queue\n  static compare (a, b) {\n\n    // favor event with a point that the sweep line hits first\n    const ptCmp = SweepEvent.comparePoints(a.point, b.point)\n    if (ptCmp !== 0) return ptCmp\n\n    // the points are the same, so link them if needed\n    if (a.point !== b.point) a.link(b)\n\n    // favor right events over left\n    if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1\n\n    // we have two matching left or right endpoints\n    // ordering of this case is the same as for their segments\n    return Segment.compare(a.segment, b.segment)\n  }\n\n  // for ordering points in sweep line order\n  static comparePoints (aPt, bPt) {\n    if (aPt.x < bPt.x) return -1\n    if (aPt.x > bPt.x) return 1\n\n    if (aPt.y < bPt.y) return -1\n    if (aPt.y > bPt.y) return 1\n\n    return 0\n  }\n\n  // Warning: 'point' input will be modified and re-used (for performance)\n  constructor (point, isLeft) {\n    if (point.events === undefined) point.events = [this]\n    else point.events.push(this)\n    this.point = point\n    this.isLeft = isLeft\n    // this.segment, this.otherSE set by factory\n  }\n\n  link (other) {\n    if (other.point === this.point) {\n      throw new Error('Tried to link already linked events')\n    }\n    const otherEvents = other.point.events\n    for (let i = 0, iMax = otherEvents.length; i < iMax; i++) {\n      const evt = otherEvents[i]\n      this.point.events.push(evt)\n      evt.point = this.point\n    }\n    this.checkForConsuming()\n  }\n\n  /* Do a pass over our linked events and check to see if any pair\n   * of segments match, and should be consumed. */\n  checkForConsuming () {\n    // FIXME: The loops in this method run O(n^2) => no good.\n    //        Maintain little ordered sweep event trees?\n    //        Can we maintaining an ordering that avoids the need\n    //        for the re-sorting with getLeftmostComparator in geom-out?\n\n    // Compare each pair of events to see if other events also match\n    const numEvents = this.point.events.length\n    for (let i = 0; i < numEvents; i++) {\n      const evt1 = this.point.events[i]\n      if (evt1.segment.consumedBy !== undefined) continue\n      for (let j = i + 1; j < numEvents; j++) {\n        const evt2 = this.point.events[j]\n        if (evt2.consumedBy !== undefined) continue\n        if (evt1.otherSE.point.events !== evt2.otherSE.point.events) continue\n        evt1.segment.consume(evt2.segment)\n      }\n    }\n  }\n\n  getAvailableLinkedEvents () {\n    // point.events is always of length 2 or greater\n    const events = []\n    for (let i = 0, iMax = this.point.events.length; i < iMax; i++) {\n      const evt = this.point.events[i]\n      if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {\n        events.push(evt)\n      }\n    }\n    return events\n  }\n\n  /**\n   * Returns a comparator function for sorting linked events that will\n   * favor the event that will give us the smallest left-side angle.\n   * All ring construction starts as low as possible heading to the right,\n   * so by always turning left as sharp as possible we'll get polygons\n   * without uncessary loops & holes.\n   *\n   * The comparator function has a compute cache such that it avoids\n   * re-computing already-computed values.\n   */\n  getLeftmostComparator (baseEvent) {\n    const cache = new Map()\n\n    const fillCache = linkedEvent => {\n      const nextEvent = linkedEvent.otherSE\n      cache.set(linkedEvent, {\n        sine: sineOfAngle(this.point, baseEvent.point, nextEvent.point),\n        cosine: cosineOfAngle(this.point, baseEvent.point, nextEvent.point)\n      })\n    }\n\n    return (a, b) => {\n      if (!cache.has(a)) fillCache(a)\n      if (!cache.has(b)) fillCache(b)\n\n      const { sine: asine, cosine: acosine } = cache.get(a)\n      const { sine: bsine, cosine: bcosine } = cache.get(b)\n\n      // both on or above x-axis\n      if (asine >= 0 && bsine >= 0) {\n        if (acosine < bcosine) return 1\n        if (acosine > bcosine) return -1\n        return 0\n      }\n\n      // both below x-axis\n      if (asine < 0 && bsine < 0) {\n        if (acosine < bcosine) return -1\n        if (acosine > bcosine) return 1\n        return 0\n      }\n\n      // one above x-axis, one below\n      if (bsine < asine) return -1\n      if (bsine > asine) return 1\n      return 0\n    }\n  }\n}\n","import operation from './operation'\nimport SweepEvent from './sweep-event'\nimport { isInBbox, getBboxOverlap } from './bbox'\nimport { cmp } from './flp'\nimport { closestPoint, intersection } from './vector'\nimport rounder from './rounder'\n\n// Give segments unique ID's to get consistent sorting of\n// segments and sweep events when all else is identical\nlet segmentId = 0\n\nexport default class Segment {\n\n  /* This compare() function is for ordering segments in the sweep\n   * line tree, and does so according to the following criteria:\n   *\n   * Consider the vertical line that lies an infinestimal step to the\n   * right of the right-more of the two left endpoints of the input\n   * segments. Imagine slowly moving a point up from negative infinity\n   * in the increasing y direction. Which of the two segments will that\n   * point intersect first? That segment comes 'before' the other one.\n   *\n   * If neither segment would be intersected by such a line, (if one\n   * or more of the segments are vertical) then the line to be considered\n   * is directly on the right-more of the two left inputs.\n   */\n  static compare (a, b) {\n\n    const alx = a.leftSE.point.x\n    const blx = b.leftSE.point.x\n    const arx = a.rightSE.point.x\n    const brx = b.rightSE.point.x\n\n    // check if they're even in the same vertical plane\n    if (brx < alx) return 1\n    if (arx < blx) return -1\n\n    const aly = a.leftSE.point.y\n    const bly = b.leftSE.point.y\n    const ary = a.rightSE.point.y\n    const bry = b.rightSE.point.y\n\n    // is left endpoint of segment B the right-more?\n    if (alx < blx) {\n      // are the two segments in the same horizontal plane?\n      if (bly < aly && bly < ary) return 1\n      if (bly > aly && bly > ary) return -1\n\n      // is the B left endpoint colinear to segment A?\n      const aCmpBLeft = a.comparePoint(b.leftSE.point)\n      if (aCmpBLeft < 0) return 1\n      if (aCmpBLeft > 0) return -1\n\n      // is the A right endpoint colinear to segment B ?\n      const bCmpARight = b.comparePoint(a.rightSE.point)\n      if (bCmpARight !== 0) return bCmpARight\n\n      // colinear segments, consider the one with left-more\n      // left endpoint to be first (arbitrary?)\n      return -1\n    }\n\n    // is left endpoint of segment A the right-more?\n    if (alx > blx) {\n      if (aly < bly && aly < bry) return -1\n      if (aly > bly && aly > bry) return 1\n\n      // is the A left endpoint colinear to segment B?\n      const bCmpALeft = b.comparePoint(a.leftSE.point)\n      if (bCmpALeft !== 0) return bCmpALeft\n\n      // is the B right endpoint colinear to segment A?\n      const aCmpBRight = a.comparePoint(b.rightSE.point)\n      if (aCmpBRight < 0) return 1\n      if (aCmpBRight > 0) return -1\n\n      // colinear segments, consider the one with left-more\n      // left endpoint to be first (arbitrary?)\n      return 1\n    }\n\n    // if we get here, the two left endpoints are in the same\n    // vertical plane, ie alx === blx\n\n    // consider the lower left-endpoint to come first\n    if (aly < bly) return -1\n    if (aly > bly) return 1\n\n    // left endpoints are identical\n    // check for colinearity by using the left-more right endpoint\n\n    // is the A right endpoint more left-more?\n    if (arx < brx) {\n      const bCmpARight = b.comparePoint(a.rightSE.point)\n      if (bCmpARight !== 0) return bCmpARight\n    }\n\n    // is the B right endpoint more left-more?\n    if (arx > brx) {\n      const aCmpBRight = a.comparePoint(b.rightSE.point)\n      if (aCmpBRight < 0) return 1\n      if (aCmpBRight > 0) return -1\n    }\n\n    if (arx !== brx)  {\n      // are these two [almost] vertical segments with opposite orientation?\n      // if so, the one with the lower right endpoint comes first\n      const ay = ary - aly\n      const ax = arx - alx\n      const by = bry - bly\n      const bx = brx - blx\n      if (ay > ax && by < bx) return 1\n      if (ay < ax && by > bx) return -1\n    }\n\n    // we have colinear segments with matching orientation\n    // consider the one with more left-more right endpoint to be first\n    if (arx > brx) return 1\n    if (arx < brx) return -1\n\n    // if we get here, two two right endpoints are in the same\n    // vertical plane, ie arx === brx\n\n    // consider the lower right-endpoint to come first\n    if (ary < bry) return -1\n    if (ary > bry) return 1\n\n    // right endpoints identical as well, so the segments are idential\n    // fall back on creation order as consistent tie-breaker\n    if (a.id < b.id) return -1\n    if (a.id > b.id) return 1\n\n    // identical segment, ie a === b\n    return 0\n  }\n\n  /* Warning: a reference to ringWindings input will be stored,\n   *  and possibly will be later modified */\n  constructor (leftSE, rightSE, rings, windings) {\n    this.id = ++segmentId\n    this.leftSE = leftSE\n    leftSE.segment = this\n    leftSE.otherSE = rightSE\n    this.rightSE = rightSE\n    rightSE.segment = this\n    rightSE.otherSE = leftSE\n    this.rings = rings\n    this.windings = windings\n    // left unset for performance, set later in algorithm\n    // this.ringOut, this.consumedBy, this.prev\n  }\n\n  static fromRing(pt1, pt2, ring) {\n    let leftPt, rightPt, winding\n\n    // ordering the two points according to sweep line ordering\n    const cmpPts = SweepEvent.comparePoints(pt1, pt2)\n    if (cmpPts < 0) {\n      leftPt = pt1\n      rightPt = pt2\n      winding = 1\n    }\n    else if (cmpPts > 0) {\n      leftPt = pt2\n      rightPt = pt1\n      winding = -1\n    }\n    else throw new Error(\n      `Tried to create degenerate segment at [${pt1.x}, ${pt1.y}]`\n    )\n\n    const leftSE = new SweepEvent(leftPt, true)\n    const rightSE = new SweepEvent(rightPt, false)\n    return new Segment(leftSE, rightSE, [ring], [winding])\n  }\n\n  /* When a segment is split, the rightSE is replaced with a new sweep event */\n  replaceRightSE (newRightSE) {\n    this.rightSE = newRightSE\n    this.rightSE.segment = this\n    this.rightSE.otherSE = this.leftSE\n    this.leftSE.otherSE = this.rightSE\n  }\n\n  bbox () {\n    const y1 = this.leftSE.point.y\n    const y2 = this.rightSE.point.y\n    return {\n      ll: { x: this.leftSE.point.x, y: y1 < y2 ? y1 : y2 },\n      ur: { x: this.rightSE.point.x, y: y1 > y2 ? y1 : y2 }\n    }\n  }\n\n  /* A vector from the left point to the right */\n  vector () {\n    return {\n      x: this.rightSE.point.x - this.leftSE.point.x,\n      y: this.rightSE.point.y - this.leftSE.point.y\n    }\n  }\n\n  isAnEndpoint (pt) {\n    return (\n      (pt.x === this.leftSE.point.x && pt.y === this.leftSE.point.y) ||\n      (pt.x === this.rightSE.point.x && pt.y === this.rightSE.point.y)\n    )\n  }\n\n  /* Compare this segment with a point. Return value indicates:\n   *     1: point lies above or to the left of segment\n   *     0: point is colinear to segment\n   *    -1: point is below or to the right of segment */\n  comparePoint (point) {\n    if (this.isAnEndpoint(point)) return 0\n    const interPt = closestPoint(this.leftSE.point, this.rightSE.point, point)\n\n    // use cmp() to do the same rounding as would apply in rounder.round\n    // but avoid using rounder.round for performance boost, and to avoid\n    // saving the result in the rounding trees\n\n    // also, there is a fair amount of rounding error introduced when computing\n    // the closestPoint to a nearly vertical or horizontal segment. Thus, we use\n    // the more accurate coordinate for comparison of the two points\n\n    const lx = this.leftSE.point.x\n    const ly = this.leftSE.point.y\n    const rx = this.rightSE.point.x\n    const ry = this.rightSE.point.y\n\n    // is the segment upward sloping?\n    if (ry >= ly) {\n      // is the segment more vertical?\n      if (ry - ly > rx - lx) {\n        // use the X coordinate\n        const cmpX = cmp(interPt.x, point.x)\n        if (cmpX != 0) return cmpX\n      }\n      else {\n        // segment is more horizontal, so use Y coord\n        const cmpY = cmp(point.y, interPt.y)\n        if (cmpY != 0) return cmpY\n      }\n    }\n    else {\n      // segment is more downward sloping\n      // is the segment more vertical?\n      if (ly - ry > rx - lx) {\n        // use the X coordinate\n        const cmpX = cmp(point.x, interPt.x)\n        if (cmpX != 0) return cmpX\n      }\n      else {\n        // segment is more horizontal, so use the Y coordinate\n        const cmpY = cmp(point.y, interPt.y)\n        if (cmpY != 0) return cmpY\n      }\n    }\n\n    // on the line\n    return 0\n  }\n\n  /**\n   * Given another segment, returns the first non-trivial intersection\n   * between the two segments (in terms of sweep line ordering), if it exists.\n   *\n   * A 'non-trivial' intersection is one that will cause one or both of the\n   * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:\n   *\n   *   * endpoint of segA with endpoint of segB --> trivial\n   *   * endpoint of segA with point along segB --> non-trivial\n   *   * endpoint of segB with point along segA --> non-trivial\n   *   * point along segA with point along segB --> non-trivial\n   *\n   * If no non-trivial intersection exists, return null\n   * Else, return null.\n   */\n  getIntersection (other) {\n    // If bboxes don't overlap, there can't be any intersections\n    const tBbox = this.bbox()\n    const oBbox = other.bbox()\n    const bboxOverlap = getBboxOverlap(tBbox, oBbox)\n    if (bboxOverlap === null) return null\n\n    // We first check to see if the endpoints can be considered intersections.\n    // This will 'snap' intersections to endpoints if possible, and will\n    // handle cases of colinearity.\n\n    const tlp = this.leftSE.point\n    const trp = this.rightSE.point\n    const olp = other.leftSE.point\n    const orp = other.rightSE.point\n\n    // does each endpoint touch the other segment?\n    // note that we restrict the 'touching' definition to only allow segments\n    // to touch endpoints that lie forward from where we are in the sweep line pass\n    const touchesOtherLSE = isInBbox(tBbox, olp) && this.comparePoint(olp) === 0\n    const touchesThisLSE = isInBbox(oBbox, tlp) && other.comparePoint(tlp) === 0\n    const touchesOtherRSE = isInBbox(tBbox, orp) && this.comparePoint(orp) === 0\n    const touchesThisRSE = isInBbox(oBbox, trp) && other.comparePoint(trp) === 0\n\n    // do left endpoints match?\n    if (touchesThisLSE && touchesOtherLSE) {\n      // these two cases are for colinear segments with matching left\n      // endpoints, and one segment being longer than the other\n      if (touchesThisRSE && !touchesOtherRSE) return trp\n      if (!touchesThisRSE && touchesOtherRSE) return orp\n      // either the two segments match exactly (two trival intersections)\n      // or just on their left endpoint (one trivial intersection\n      return null\n    }\n\n    // does this left endpoint matches (other doesn't)\n    if (touchesThisLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesOtherRSE) {\n        if (tlp.x === orp.x && tlp.y === orp.y) return null\n      }\n      // t-intersection on left endpoint\n      return tlp\n    }\n\n    // does other left endpoint matches (this doesn't)\n    if (touchesOtherLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesThisRSE) {\n        if (trp.x === olp.x && trp.y === olp.y) return null\n      }\n      // t-intersection on left endpoint\n      return olp\n    }\n\n    // trivial intersection on right endpoints\n    if (touchesThisRSE && touchesOtherRSE) return null\n\n    // t-intersections on just one right endpoint\n    if (touchesThisRSE) return trp\n    if (touchesOtherRSE) return orp\n\n    // None of our endpoints intersect. Look for a general intersection between\n    // infinite lines laid over the segments\n    const pt = intersection(tlp, this.vector(), olp, other.vector())\n\n    // are the segments parrallel? Note that if they were colinear with overlap,\n    // they would have an endpoint intersection and that case was already handled above\n    if (pt === null) return null\n\n    // is the intersection found between the lines not on the segments?\n    if (!isInBbox(bboxOverlap, pt)) return null\n\n    // round the the computed point if needed\n    return rounder.round(pt.x, pt.y)\n  }\n\n  /**\n   * Split the given segment into multiple segments on the given points.\n   *  * Each existing segment will retain its leftSE and a new rightSE will be\n   *    generated for it.\n   *  * A new segment will be generated which will adopt the original segment's\n   *    rightSE, and a new leftSE will be generated for it.\n   *  * If there are more than two points given to split on, new segments\n   *    in the middle will be generated with new leftSE and rightSE's.\n   *  * An array of the newly generated SweepEvents will be returned.\n   *\n   * Warning: input array of points is modified\n   */\n  split (point) {\n    const newEvents = []\n    const alreadyLinked = point.events !== undefined\n\n    const newLeftSE = new SweepEvent(point, true)\n    const newRightSE = new SweepEvent(point, false)\n    const oldRightSE = this.rightSE\n    this.replaceRightSE(newRightSE)\n    newEvents.push(newRightSE)\n    newEvents.push(newLeftSE)\n    const newSeg = new Segment(\n      newLeftSE, oldRightSE, this.rings.slice(), this.windings.slice()\n    )\n\n    // when splitting a nearly vertical downward-facing segment,\n    // sometimes one of the resulting new segments is vertical, in which\n    // case its left and right events may need to be swapped\n    if (SweepEvent.comparePoints(newSeg.leftSE.point, newSeg.rightSE.point) > 0) {\n      newSeg.swapEvents()\n    }\n    if (SweepEvent.comparePoints(this.leftSE.point, this.rightSE.point) > 0) {\n      this.swapEvents()\n    }\n\n    // in the point we just used to create new sweep events with was already\n    // linked to other events, we need to check if either of the affected\n    // segments should be consumed\n    if (alreadyLinked) {\n      newLeftSE.checkForConsuming()\n      newRightSE.checkForConsuming()\n    }\n\n    return newEvents\n  }\n\n  /* Swap which event is left and right */\n  swapEvents () {\n    const tmpEvt = this.rightSE\n    this.rightSE = this.leftSE\n    this.leftSE = tmpEvt\n    this.leftSE.isLeft = true\n    this.rightSE.isLeft = false\n    for (let i = 0, iMax = this.windings.length; i < iMax; i++) {\n      this.windings[i] *= -1\n    }\n  }\n\n  /* Consume another segment. We take their rings under our wing\n   * and mark them as consumed. Use for perfectly overlapping segments */\n  consume (other) {\n    let consumer = this\n    let consumee = other\n    while (consumer.consumedBy) consumer = consumer.consumedBy\n    while (consumee.consumedBy) consumee = consumee.consumedBy\n\n    const cmp = Segment.compare(consumer, consumee)\n    if (cmp === 0) return  // already consumed\n    // the winner of the consumption is the earlier segment\n    // according to sweep line ordering\n    if (cmp  > 0) {\n      const tmp = consumer\n      consumer = consumee\n      consumee = tmp\n    }\n\n    // make sure a segment doesn't consume it's prev\n    if (consumer.prev === consumee) {\n      const tmp = consumer\n      consumer = consumee\n      consumee = tmp\n    }\n\n    for (let i = 0, iMax = consumee.rings.length; i < iMax; i++) {\n      const ring = consumee.rings[i]\n      const winding = consumee.windings[i]\n      const index = consumer.rings.indexOf(ring)\n      if (index === -1) {\n        consumer.rings.push(ring)\n        consumer.windings.push(winding)\n      }\n      else consumer.windings[index] += winding\n    }\n    consumee.rings = null\n    consumee.windings = null\n    consumee.consumedBy = consumer\n\n    // mark sweep events consumed as to maintain ordering in sweep event queue\n    consumee.leftSE.consumedBy = consumer.leftSE\n    consumee.rightSE.consumedBy = consumer.rightSE\n  }\n\n  /* The first segment previous segment chain that is in the result */\n  prevInResult () {\n    if (this._prevInResult !== undefined) return this._prevInResult\n    if (! this.prev) this._prevInResult = null\n    else if (this.prev.isInResult()) this._prevInResult = this.prev\n    else this._prevInResult = this.prev.prevInResult()\n    return this._prevInResult\n  }\n\n  beforeState() {\n    if (this._beforeState !== undefined) return this._beforeState\n    if (! this.prev) this._beforeState = {\n      rings: [],\n      windings: [],\n      multiPolys: [],\n    }\n    else {\n      const seg = this.prev.consumedBy || this.prev\n      this._beforeState = seg.afterState()\n    }\n    return this._beforeState\n  }\n\n  afterState () {\n    if (this._afterState !== undefined) return this._afterState\n\n    const beforeState = this.beforeState()\n    this._afterState = {\n      rings: beforeState.rings.slice(0),\n      windings: beforeState.windings.slice(0),\n      multiPolys: []\n    }\n    const ringsAfter = this._afterState.rings\n    const windingsAfter = this._afterState.windings\n    const mpsAfter = this._afterState.multiPolys\n\n    // calculate ringsAfter, windingsAfter\n    for (let i = 0, iMax = this.rings.length; i < iMax; i++) {\n      const ring = this.rings[i]\n      const winding = this.windings[i]\n      const index = ringsAfter.indexOf(ring)\n      if (index === -1) {\n        ringsAfter.push(ring)\n        windingsAfter.push(winding)\n      }\n      else windingsAfter[index] += winding\n    }\n\n    // calcualte polysAfter\n    const polysAfter = []\n    const polysExclude = []\n    for (let i = 0, iMax = ringsAfter.length; i < iMax; i++) {\n      if (windingsAfter[i] === 0) continue // non-zero rule\n      const ring = ringsAfter[i]\n      const poly = ring.poly\n      if (polysExclude.indexOf(poly) !== -1) continue\n      if (ring.isExterior) polysAfter.push(poly)\n      else {\n        if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly)\n        const index = polysAfter.indexOf(ring.poly)\n        if (index !== -1) polysAfter.splice(index, 1)\n      }\n    }\n\n    // calculate multiPolysAfter\n    for (let i = 0, iMax = polysAfter.length; i < iMax; i++) {\n      const mp = polysAfter[i].multiPoly\n      if (mpsAfter.indexOf(mp) === -1) mpsAfter.push(mp)\n    }\n\n    return this._afterState\n  }\n\n  /* Is this segment part of the final result? */\n  isInResult () {\n    // if we've been consumed, we're not in the result\n    if (this.consumedBy) return false\n\n    if (this._isInResult !== undefined) return this._isInResult\n\n    const mpsBefore = this.beforeState().multiPolys\n    const mpsAfter = this.afterState().multiPolys\n\n    switch (operation.type) {\n      case 'union': {\n        // UNION - included iff:\n        //  * On one side of us there is 0 poly interiors AND\n        //  * On the other side there is 1 or more.\n        const noBefores = mpsBefore.length === 0\n        const noAfters = mpsAfter.length === 0\n        this._isInResult = noBefores !== noAfters\n        break\n      }\n\n      case 'intersection': {\n        // INTERSECTION - included iff:\n        //  * on one side of us all multipolys are rep. with poly interiors AND\n        //  * on the other side of us, not all multipolys are repsented\n        //    with poly interiors\n        let least\n        let most\n        if (mpsBefore.length < mpsAfter.length) {\n          least = mpsBefore.length\n          most = mpsAfter.length\n        } else {\n          least = mpsAfter.length\n          most = mpsBefore.length\n        }\n        this._isInResult = most === operation.numMultiPolys && least < most\n        break\n      }\n\n      case 'xor': {\n        // XOR - included iff:\n        //  * the difference between the number of multipolys represented\n        //    with poly interiors on our two sides is an odd number\n        const diff = Math.abs(mpsBefore.length - mpsAfter.length)\n        this._isInResult = diff % 2 === 1\n        break\n      }\n\n      case 'difference': {\n        // DIFFERENCE included iff:\n        //  * on exactly one side, we have just the subject\n        const isJustSubject = mps => mps.length === 1 && mps[0].isSubject\n        this._isInResult = isJustSubject(mpsBefore) !== isJustSubject(mpsAfter)\n        break\n      }\n\n      default:\n        throw new Error(`Unrecognized operation type found ${operation.type}`)\n    }\n\n    return this._isInResult\n  }\n\n}\n","import Segment from './segment'\n\nexport class RingIn {\n  constructor (geomRing, poly, isExterior) {\n    this.poly = poly\n    this.isExterior = isExterior\n    this.segments = []\n\n    let prevPoint = geomRing[0]\n    this.bbox = {\n      ll: { x: prevPoint.x, y: prevPoint.y },\n      ur: { x: prevPoint.x, y: prevPoint.y },\n    }\n\n    for (let i = 1, iMax = geomRing.length; i < iMax; i++) {\n      let point = geomRing[i]\n      this.segments.push(Segment.fromRing(prevPoint, point, this))\n      if (point.x < this.bbox.ll.x) this.bbox.ll.x = point.x\n      if (point.y < this.bbox.ll.y) this.bbox.ll.y = point.y\n      if (point.x > this.bbox.ur.x) this.bbox.ur.x = point.x\n      if (point.y > this.bbox.ur.y) this.bbox.ur.y = point.y\n      prevPoint = point\n    }\n    this.segments.push(Segment.fromRing(prevPoint, geomRing[0], this))\n  }\n\n  getSweepEvents () {\n    const sweepEvents = []\n    for (let i = 0, iMax = this.segments.length; i < iMax; i++) {\n      const segment = this.segments[i]\n      sweepEvents.push(segment.leftSE)\n      sweepEvents.push(segment.rightSE)\n    }\n    return sweepEvents\n  }\n}\n\nexport class PolyIn {\n  constructor (geomPoly, multiPoly) {\n    this.exteriorRing = new RingIn(geomPoly[0], this, true)\n    // copy by value\n    this.bbox = {\n      ll: { x: this.exteriorRing.bbox.ll.x, y: this.exteriorRing.bbox.ll.y },\n      ur: { x: this.exteriorRing.bbox.ur.x, y: this.exteriorRing.bbox.ur.y },\n    }\n    this.interiorRings = []\n    for (let i = 1, iMax = geomPoly.length; i < iMax; i++) {\n      const ring = new RingIn(geomPoly[i], this, false)\n      if (ring.bbox.ll.x < this.bbox.ll.x) this.bbox.ll.x = ring.bbox.ll.x\n      if (ring.bbox.ll.y < this.bbox.ll.y) this.bbox.ll.y = ring.bbox.ll.y\n      if (ring.bbox.ur.x > this.bbox.ur.x) this.bbox.ur.x = ring.bbox.ur.x\n      if (ring.bbox.ur.y > this.bbox.ur.y) this.bbox.ur.y = ring.bbox.ur.y\n      this.interiorRings.push(ring)\n    }\n    this.multiPoly = multiPoly\n  }\n\n  getSweepEvents () {\n    const sweepEvents = this.exteriorRing.getSweepEvents()\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringSweepEvents = this.interiorRings[i].getSweepEvents()\n      for (let j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(ringSweepEvents[j])\n      }\n    }\n    return sweepEvents\n  }\n}\n\nexport class MultiPolyIn {\n  constructor (geomMultiPoly) {\n    this.polys = []\n    this.bbox = {\n      ll: { x: Number.POSITIVE_INFINITY, y: Number.POSITIVE_INFINITY },\n      ur: { x: Number.NEGATIVE_INFINITY, y: Number.NEGATIVE_INFINITY },\n    }\n    for (let i = 0, iMax = geomMultiPoly.length; i < iMax; i++) {\n      const poly = new PolyIn(geomMultiPoly[i], this)\n      if (poly.bbox.ll.x < this.bbox.ll.x) this.bbox.ll.x = poly.bbox.ll.x\n      if (poly.bbox.ll.y < this.bbox.ll.y) this.bbox.ll.y = poly.bbox.ll.y\n      if (poly.bbox.ur.x > this.bbox.ur.x) this.bbox.ur.x = poly.bbox.ur.x\n      if (poly.bbox.ur.y > this.bbox.ur.y) this.bbox.ur.y = poly.bbox.ur.y\n      this.polys.push(poly)\n    }\n    this.isSubject = false\n  }\n\n  markAsSubject () {\n    this.isSubject = true\n  }\n\n  getSweepEvents () {\n    const sweepEvents = []\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polySweepEvents = this.polys[i].getSweepEvents()\n      for (let j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(polySweepEvents[j])\n      }\n    }\n    return sweepEvents\n  }\n}\n","import { compareVectorAngles } from './vector'\nimport SweepEvent from './sweep-event'\n\nexport class RingOut {\n  /* Given the segments from the sweep line pass, compute & return a series\n   * of closed rings from all the segments marked to be part of the result */\n  static factory (allSegments) {\n    const ringsOut = []\n\n    for (let i = 0, iMax = allSegments.length; i < iMax; i++) {\n      const segment = allSegments[i]\n      if (!segment.isInResult() || segment.ringOut) continue\n\n      let prevEvent = null\n      let event = segment.leftSE\n      let nextEvent = segment.rightSE\n      const events = [event]\n\n      const startingPoint = event.point\n      const intersectionLEs = []\n\n      /* Walk the chain of linked events to form a closed ring */\n      while (true) {\n        prevEvent = event\n        event = nextEvent\n        events.push(event)\n\n        /* Is the ring complete? */\n        if (event.point === startingPoint) break\n\n        while (true) {\n          const availableLEs = event.getAvailableLinkedEvents()\n\n          /* Did we hit a dead end? This shouldn't happen. Indicates some earlier\n           * part of the algorithm malfunctioned... please file a bug report. */\n          if (availableLEs.length === 0) {\n            const firstPt = events[0].point\n            const lastPt = events[events.length - 1].point\n            throw new Error(\n              `Unable to complete output ring starting at [${firstPt.x},` +\n                ` ${firstPt.y}]. Last matching segment found ends at` +\n                ` [${lastPt.x}, ${lastPt.y}].`\n            )\n          }\n\n          /* Only one way to go, so cotinue on the path */\n          if (availableLEs.length === 1) {\n            nextEvent = availableLEs[0].otherSE\n            break\n          }\n\n          /* We must have an intersection. Check for a completed loop */\n          let indexLE = null\n          for (let j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\n            if (intersectionLEs[j].point === event.point) {\n              indexLE = j\n              break\n            }\n          }\n          /* Found a completed loop. Cut that off and make a ring */\n          if (indexLE !== null) {\n            const intersectionLE = intersectionLEs.splice(indexLE)[0]\n            const ringEvents = events.splice(intersectionLE.index)\n            ringEvents.unshift(ringEvents[0].otherSE)\n            ringsOut.push(new RingOut(ringEvents.reverse()))\n            continue\n          }\n          /* register the intersection */\n          intersectionLEs.push({\n            index: events.length,\n            point: event.point,\n          })\n          /* Choose the left-most option to continue the walk */\n          const comparator = event.getLeftmostComparator(prevEvent)\n          nextEvent = availableLEs.sort(comparator)[0].otherSE\n          break\n        }\n      }\n\n      ringsOut.push(new RingOut(events))\n    }\n    return ringsOut\n  }\n\n  constructor (events) {\n    this.events = events\n    for (let i = 0, iMax = events.length; i < iMax; i++) {\n      events[i].segment.ringOut = this\n    }\n    this.poly = null\n  }\n\n  getGeom () {\n    // Remove superfluous points (ie extra points along a straight line),\n    let prevPt = this.events[0].point\n    const points = [prevPt]\n    for (let i = 1, iMax = this.events.length - 1; i < iMax; i++) {\n      const pt = this.events[i].point\n      const nextPt = this.events[i + 1].point\n      if (compareVectorAngles(pt, prevPt, nextPt) === 0) continue\n      points.push(pt)\n      prevPt = pt\n    }\n\n    // ring was all (within rounding error of angle calc) colinear points\n    if (points.length === 1) return null\n\n    // check if the starting point is necessary\n    const pt = points[0]\n    const nextPt = points[1]\n    if (compareVectorAngles(pt, prevPt, nextPt) === 0) points.shift()\n\n    points.push(points[0])\n    const step = this.isExteriorRing() ? 1 : -1\n    const iStart = this.isExteriorRing() ? 0 : points.length - 1\n    const iEnd = this.isExteriorRing() ? points.length : -1\n    const orderedPoints = []\n    for (let i = iStart; i != iEnd; i += step) orderedPoints.push([points[i].x, points[i].y])\n    return orderedPoints\n  }\n\n  isExteriorRing () {\n    if (this._isExteriorRing === undefined) {\n      const enclosing = this.enclosingRing()\n      this._isExteriorRing = enclosing ? ! enclosing.isExteriorRing() : true\n    }\n    return this._isExteriorRing\n  }\n\n  enclosingRing () {\n    if (this._enclosingRing === undefined) {\n      this._enclosingRing = this._calcEnclosingRing()\n    }\n    return this._enclosingRing\n  }\n\n  /* Returns the ring that encloses this one, if any */\n  _calcEnclosingRing () {\n    // start with the ealier sweep line event so that the prevSeg\n    // chain doesn't lead us inside of a loop of ours\n    let leftMostEvt = this.events[0]\n    for (let i = 1, iMax = this.events.length; i < iMax; i++) {\n      const evt = this.events[i]\n      if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt\n    }\n\n    let prevSeg = leftMostEvt.segment.prevInResult()\n    let prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null\n\n    while (true) {\n      // no segment found, thus no ring can enclose us\n      if (!prevSeg) return null\n\n      // no segments below prev segment found, thus the ring of the prev\n      // segment must loop back around and enclose us\n      if (!prevPrevSeg) return prevSeg.ringOut\n\n      // if the two segments are of different rings, the ring of the prev\n      // segment must either loop around us or the ring of the prev prev\n      // seg, which would make us and the ring of the prev peers\n      if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\n        if (prevPrevSeg.ringOut.enclosingRing() !== prevSeg.ringOut) {\n          return prevSeg.ringOut\n        } else return prevSeg.ringOut.enclosingRing()\n      }\n\n      // two segments are from the same ring, so this was a penisula\n      // of that ring. iterate downward, keep searching\n      prevSeg = prevPrevSeg.prevInResult()\n      prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null\n    }\n  }\n}\n\nexport class PolyOut {\n  constructor (exteriorRing) {\n    this.exteriorRing = exteriorRing\n    exteriorRing.poly = this\n    this.interiorRings = []\n  }\n\n  addInterior (ring) {\n    this.interiorRings.push(ring)\n    ring.poly = this\n  }\n\n  getGeom () {\n    const geom = [this.exteriorRing.getGeom()]\n    // exterior ring was all (within rounding error of angle calc) colinear points\n    if (geom[0] === null) return null\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringGeom = this.interiorRings[i].getGeom()\n      // interior ring was all (within rounding error of angle calc) colinear points\n      if (ringGeom === null) continue\n      geom.push(ringGeom)\n    }\n    return geom\n  }\n}\n\nexport class MultiPolyOut {\n  constructor (rings) {\n    this.rings = rings\n    this.polys = this._composePolys(rings)\n  }\n\n  getGeom () {\n    const geom = []\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polyGeom = this.polys[i].getGeom()\n      // exterior ring was all (within rounding error of angle calc) colinear points\n      if (polyGeom === null) continue\n      geom.push(polyGeom)\n    }\n    return geom\n  }\n\n  _composePolys (rings) {\n    const polys = []\n    for (let i = 0, iMax = rings.length; i < iMax; i++) {\n      const ring = rings[i]\n      if (ring.poly) continue\n      if (ring.isExteriorRing()) polys.push(new PolyOut(ring))\n      else {\n        const enclosingRing = ring.enclosingRing()\n        if (!enclosingRing.poly) polys.push(new PolyOut(enclosingRing))\n        enclosingRing.poly.addInterior(ring)\n      }\n    }\n    return polys\n  }\n}\n","import SplayTree from 'splaytree'\nimport Segment from './segment'\nimport SweepEvent from './sweep-event'\n\n/**\n * NOTE:  We must be careful not to change any segments while\n *        they are in the SplayTree. AFAIK, there's no way to tell\n *        the tree to rebalance itself - thus before splitting\n *        a segment that's in the tree, we remove it from the tree,\n *        do the split, then re-insert it. (Even though splitting a\n *        segment *shouldn't* change its correct position in the\n *        sweep line tree, the reality is because of rounding errors,\n *        it sometimes does.)\n */\n\nexport default class SweepLine {\n  constructor (queue, comparator = Segment.compare) {\n    this.queue = queue\n    this.tree = new SplayTree(comparator)\n    this.segments = []\n  }\n\n  process (event) {\n    const segment = event.segment\n    const newEvents = []\n\n    // if we've already been consumed by another segment,\n    // clean up our body parts and get out\n    if (event.consumedBy) {\n      if (event.isLeft) this.queue.remove(event.otherSE)\n      else this.tree.remove(segment)\n      return newEvents\n    }\n\n    const node = event.isLeft\n      ? this.tree.insert(segment)\n      : this.tree.find(segment)\n\n    if (! node) throw new Error(\n      `Unable to find segment #${segment.id} ` +\n      `[${segment.leftSE.point.x}, ${segment.leftSE.point.y}] -> ` +\n      `[${segment.rightSE.point.x}, ${segment.rightSE.point.y}] ` +\n      'in SweepLine tree. Please submit a bug report.'\n    )\n\n    let prevNode = node\n    let nextNode = node\n    let prevSeg = undefined\n    let nextSeg = undefined\n\n    // skip consumed segments still in tree\n    while (prevSeg === undefined) {\n      prevNode = this.tree.prev(prevNode)\n      if (prevNode === null) prevSeg = null\n      else if (prevNode.key.consumedBy === undefined) prevSeg = prevNode.key\n    }\n\n    // skip consumed segments still in tree\n    while (nextSeg === undefined) {\n      nextNode = this.tree.next(nextNode)\n      if (nextNode === null) nextSeg = null\n      else if (nextNode.key.consumedBy === undefined) nextSeg = nextNode.key\n    }\n\n    if (event.isLeft) {\n\n      // Check for intersections against the previous segment in the sweep line\n      let prevMySplitter = null\n      if (prevSeg) {\n        const prevInter = prevSeg.getIntersection(segment)\n        if (prevInter !== null) {\n          if (!segment.isAnEndpoint(prevInter)) prevMySplitter = prevInter\n          if (!prevSeg.isAnEndpoint(prevInter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, prevInter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      // Check for intersections against the next segment in the sweep line\n      let nextMySplitter = null\n      if (nextSeg) {\n        const nextInter = nextSeg.getIntersection(segment)\n        if (nextInter !== null) {\n          if (!segment.isAnEndpoint(nextInter)) nextMySplitter = nextInter\n          if (!nextSeg.isAnEndpoint(nextInter))  {\n            const newEventsFromSplit = this._splitSafely(nextSeg, nextInter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      // For simplicity, even if we find more than one intersection we only\n      // spilt on the 'earliest' (sweep-line style) of the intersections.\n      // The other intersection will be handled in a future process().\n      if (prevMySplitter !== null || nextMySplitter !== null) {\n\n        let mySplitter = null\n        if (prevMySplitter === null) mySplitter = nextMySplitter\n        else if (nextMySplitter === null) mySplitter = prevMySplitter\n        else {\n          const cmpSplitters = SweepEvent.comparePoints(prevMySplitter, nextMySplitter)\n          if (cmpSplitters < 0) mySplitter = prevMySplitter\n          if (cmpSplitters > 0) mySplitter = nextMySplitter\n          // the two splitters are the exact same point\n          mySplitter = prevMySplitter\n        }\n\n        // Rounding errors can cause changes in ordering,\n        // so remove afected segments and right sweep events before splitting\n        this.queue.remove(segment.rightSE)\n        newEvents.push(segment.rightSE)\n\n        const newEventsFromSplit = segment.split(mySplitter)\n        for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n          newEvents.push(newEventsFromSplit[i])\n        }\n      }\n\n      if (newEvents.length > 0) {\n        // We found some intersections, so re-do the current event to\n        // make sure sweep line ordering is totally consistent for later\n        // use with the segment 'prev' pointers\n        this.tree.remove(segment)\n        newEvents.push(event)\n\n      } else {\n        // done with left event\n        this.segments.push(segment)\n        segment.prev = prevSeg\n      }\n\n    } else {\n      // event.isRight\n\n      // since we're about to be removed from the sweep line, check for\n      // intersections between our previous and next segments\n      if (prevSeg && nextSeg) {\n        const inter = prevSeg.getIntersection(nextSeg)\n        if (inter !== null) {\n          if (!prevSeg.isAnEndpoint(inter))  {\n            const newEventsFromSplit = this._splitSafely(prevSeg, inter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n          if (!nextSeg.isAnEndpoint(inter))  {\n            const newEventsFromSplit = this._splitSafely(nextSeg, inter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      this.tree.remove(segment)\n    }\n\n    return newEvents\n  }\n\n  /* Safely split a segment that is currently in the datastructures\n   * IE - a segment other than the one that is currently being processed. */\n  _splitSafely(seg, pt) {\n    // Rounding errors can cause changes in ordering,\n    // so remove afected segments and right sweep events before splitting\n    // removeNode() doesn't work, so have re-find the seg\n    // https://github.com/w8r/splay-tree/pull/5\n    this.tree.remove(seg)\n    const rightSE = seg.rightSE\n    this.queue.remove(rightSE)\n    const newEvents = seg.split(pt)\n    newEvents.push(rightSE)\n    // splitting can trigger consumption\n    if (seg.consumedBy === undefined) this.tree.insert(seg)\n    return newEvents\n  }\n}\n","import SplayTree from 'splaytree'\nimport { getBboxOverlap } from './bbox'\nimport * as cleanInput from './clean-input'\nimport * as geomIn from './geom-in'\nimport * as geomOut from './geom-out'\nimport rounder from './rounder'\nimport SweepEvent from './sweep-event'\nimport SweepLine from './sweep-line'\n\nexport class Operation {\n  run (type, geom, moreGeoms) {\n    operation.type = type\n    rounder.reset()\n\n    /* Make a copy of the input geometry with rounded points as objects */\n    const geoms = [cleanInput.pointsAsObjects(geom)]\n    for (let i = 0, iMax = moreGeoms.length; i < iMax; i++) {\n      geoms.push(cleanInput.pointsAsObjects(moreGeoms[i]))\n    }\n\n    /* Clean inputs */\n    for (let i = 0, iMax = geoms.length; i < iMax; i++) {\n      cleanInput.forceMultiPoly(geoms[i])\n      cleanInput.cleanMultiPoly(geoms[i])\n    }\n\n    /* Convert inputs to MultiPoly objects, mark subject */\n    const multipolys = []\n    for (let i = 0, iMax = geoms.length; i < iMax; i++) {\n      multipolys.push(new geomIn.MultiPolyIn(geoms[i]))\n    }\n    multipolys[0].markAsSubject()\n    operation.numMultiPolys = multipolys.length\n\n    /* BBox optimization for difference operation\n     * If the bbox of a multipolygon that's part of the clipping doesn't\n     * intersect the bbox of the subject at all, we can just drop that\n     * multiploygon. */\n    if (operation.type === 'difference') {\n      // in place removal\n      const subject = multipolys[0]\n      let i = 1\n      while (i < multipolys.length) {\n        if (getBboxOverlap(multipolys[i].bbox, subject.bbox) !== null) i++\n        else multipolys.splice(i, 1)\n      }\n    }\n\n    /* BBox optimization for intersection operation\n     * If we can find any pair of multipolygons whose bbox does not overlap,\n     * then the result will be empty. */\n    if (operation.type === 'intersection') {\n      // TODO: this is O(n^2) in number of polygons. By sorting the bboxes,\n      //       it could be optimized to O(n * ln(n))\n      for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n        const mpA = multipolys[i]\n        for (let j = i + 1, jMax = multipolys.length; j < jMax; j++) {\n          if (getBboxOverlap(mpA.bbox, multipolys[j].bbox) === null) return []\n        }\n      }\n    }\n\n    /* Put segment endpoints in a priority queue */\n    const queue = new SplayTree(SweepEvent.compare)\n    for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n      const sweepEvents = multipolys[i].getSweepEvents()\n      for (let j = 0, jMax = sweepEvents.length; j < jMax; j++) {\n        queue.insert(sweepEvents[j])\n      }\n    }\n\n    /* Pass the sweep line over those endpoints */\n    const sweepLine = new SweepLine(queue)\n    let prevQueueSize = queue.size\n    let node = queue.pop()\n    while (node) {\n      const evt = node.key\n      if (queue.size === prevQueueSize) {\n        // prevents an infinite loop, an otherwise common manifestation of bugs\n        const seg = evt.segment\n        throw new Error(\n          `Unable to pop() ${evt.isLeft ? 'left' : 'right'} SweepEvent ` +\n          `[${evt.point.x}, ${evt.point.y}] from segment #${seg.id} ` +\n          `[${seg.leftSE.point.x}, ${seg.leftSE.point.y}] -> ` +\n          `[${seg.rightSE.point.x}, ${seg.rightSE.point.y}] from queue. ` +\n          'Please file a bug report.'\n        )\n      }\n      const newEvents = sweepLine.process(evt)\n      for (let i = 0, iMax = newEvents.length; i < iMax; i++) {\n        const evt = newEvents[i]\n        if (evt.consumedBy === undefined) queue.insert(evt)\n      }\n      prevQueueSize = queue.size\n      node = queue.pop()\n    }\n\n    // free some memory we don't need anymore\n    rounder.reset()\n\n    /* Collect and compile segments we're keeping into a multipolygon */\n    const ringsOut = geomOut.RingOut.factory(sweepLine.segments)\n    const result = new geomOut.MultiPolyOut(ringsOut)\n    return result.getGeom()\n  }\n}\n\n// singleton available by import\nconst operation = new Operation()\n\nexport default operation\n","import operation from './operation'\n\nconst union = (geom, ...moreGeoms) =>\n  operation.run('union', geom, moreGeoms)\n\nconst intersection = (geom, ...moreGeoms) =>\n  operation.run('intersection', geom, moreGeoms)\n\nconst xor = (geom, ...moreGeoms) =>\n  operation.run('xor', geom, moreGeoms)\n\nconst difference = (subjectGeom, ...clippingGeoms) =>\n  operation.run('difference', subjectGeom, clippingGeoms)\n\nexport default {\n  union: union,\n  intersection: intersection,\n  xor: xor,\n  difference: difference,\n}\n"],"names":["Node","key","data","left","right","DEFAULT_COMPARE","a","b","splay","i","t","comparator","l","r","y","N","cmp","insert","tree","node","_size","remove","x","split","v","Tree","_comparator","_root","this","add","current","compare","visitor","ctx","Q","done","push","length","pop","call","low","high","fn","keys","forEach","values","minNode","maxNode","index","d","root","successor","predecessor","head","next","p","toList","presort","size","sort","pivot","j","tmp","loadRecursive","parent","start","end","middle","Math","floor","mergedList","l1","l2","p1","p2","mergeLists","createList","sortedListToBST","list","printNode","n","out","printRow","prefix","isTail","indent","join","newKey","newData","merge","isInBbox","bbox","point","ll","ur","getBboxOverlap","b1","b2","lowerX","upperX","epsilon","Number","EPSILON","undefined","pow","EPSILON_SQ","ab","crossProduct","dotProduct","compareVectorAngles","basePt","endPt1","endPt2","v1","v2","kross","sqrt","cosineOfAngle","pShared","pBase","pAngle","vBase","vAngle","horizontalIntersection","pt","verticalIntersection","PtRounder","reset","xRounder","CoordRounder","yRounder","round","SplayTree","coord","prevNode","prev","nextNode","rounder","pointsAsObjects","geom","output","Array","isArray","Error","iMax","jMax","k","kMax","forceMultiPoly","unshift","splice","cleanMultiPoly","multipoly","poly","exteriorRing","cleanRing","interiorRing","ring","firstPt","lastPt","prevPt","nextPt","isPointUncessary","SweepEvent","isLeft","events","ptCmp","comparePoints","link","Segment","segment","aPt","bPt","other","otherEvents","evt","checkForConsuming","numEvents","evt1","consumedBy","evt2","otherSE","consume","ringOut","isInResult","baseEvent","cache","Map","fillCache","linkedEvent","nextEvent","set","sine","_this","cosine","has","get","asine","acosine","bsine","bcosine","segmentId","leftSE","rightSE","rings","windings","id","alx","blx","arx","brx","aly","bly","ary","bry","aCmpBLeft","comparePoint","bCmpARight","bCmpALeft","aCmpBRight","ay","ax","by","bx","newRightSE","y1","y2","isAnEndpoint","interPt","ptA1","ptA2","ptB","vFar","vA","farPt","dist","closestPoint","lx","ly","rx","ry","cmpX","cmpY","tBbox","oBbox","bboxOverlap","tlp","trp","olp","orp","touchesOtherLSE","touchesThisLSE","touchesOtherRSE","touchesThisRSE","pt1","pt2","ve","d1","d2","intersection","vector","newEvents","alreadyLinked","newLeftSE","oldRightSE","replaceRightSE","newSeg","slice","swapEvents","tmpEvt","consumer","consumee","winding","indexOf","_prevInResult","prevInResult","_beforeState","seg","afterState","multiPolys","_afterState","beforeState","ringsAfter","windingsAfter","mpsAfter","polysAfter","polysExclude","isExterior","mp","multiPoly","_isInResult","mpsBefore","operation","type","noBefores","noAfters","least","most","numMultiPolys","diff","abs","isJustSubject","mps","isSubject","leftPt","rightPt","cmpPts","RingIn","geomRing","segments","prevPoint","fromRing","sweepEvents","PolyIn","geomPoly","interiorRings","getSweepEvents","ringSweepEvents","MultiPolyIn","geomMultiPoly","polys","POSITIVE_INFINITY","NEGATIVE_INFINITY","polySweepEvents","RingOut","allSegments","ringsOut","prevEvent","event","startingPoint","intersectionLEs","availableLEs","getAvailableLinkedEvents","indexLE","getLeftmostComparator","intersectionLE","ringEvents","reverse","points","shift","step","isExteriorRing","iStart","iEnd","orderedPoints","_isExteriorRing","enclosing","enclosingRing","_enclosingRing","_calcEnclosingRing","leftMostEvt","prevSeg","prevPrevSeg","PolyOut","getGeom","ringGeom","MultiPolyOut","_composePolys","polyGeom","addInterior","SweepLine","queue","find","nextSeg","prevMySplitter","prevInter","getIntersection","newEventsFromSplit","_splitSafely","nextMySplitter","nextInter","mySplitter","cmpSplitters","inter","moreGeoms","geoms","cleanInput","multipolys","geomIn","markAsSubject","subject","mpA","sweepLine","prevQueueSize","process","geomOut","factory","union","run","xor","difference","subjectGeom","clippingGeoms"],"mappings":"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"}