{"version":3,"file":"polygon-clipping.umd.min.js","sources":["../node_modules/splaytree/index.js","../src/flp.js","../src/vector.js","../src/rounder.js","../src/clean-input.js","../src/sweep-event.js","../src/segment.js","../src/bbox.js","../src/geom-in.js","../src/geom-out.js","../src/sweep-line.js","../src/operation.js","../src/index.js"],"sourcesContent":["/* follows \"An implementation of top-down splaying\"\n * by D. Sleator <sleator@cs.cmu.edu> March 1992\n */\n\n/**\n * @typedef {*} Key\n */\n\n\n/**\n * @typedef {*} Value\n */\n\n\n/**\n * @typedef {function(node:Node):void} Visitor\n */\n\n\n/**\n * @typedef {function(a:Key, b:Key):number} Comparator\n */\n\n\n/**\n * @param {function(node:Node):string} NodePrinter\n */\n\n\n/**\n * @typedef {Object}  Node\n * @property {Key}    Key\n * @property {Value=} data\n * @property {Node}   left\n * @property {Node}   right\n */\n\nclass Node {\n\n  constructor (key, data) {\n    this.key    = key;\n    this.data   = data;\n    this.left   = null;\n    this.right  = null;\n  }\n}\n\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n\n/**\n * Simple top down splay, not requiring i to be in the tree t.\n * @param {Key} i\n * @param {Node?} t\n * @param {Comparator} comparator\n */\nfunction splay (i, t, comparator) {\n  if (t === null) return t;\n  let l, r, y;\n  const N = new Node();\n  l = r = N;\n\n  while (true) {\n    const cmp = comparator(i, t.key);\n    //if (i < t.key) {\n    if (cmp < 0) {\n      if (t.left === null) break;\n      //if (i < t.left.key) {\n      if (comparator(i, t.left.key) < 0) {\n        y = t.left;                           /* rotate right */\n        t.left = y.right;\n        y.right = t;\n        t = y;\n        if (t.left === null) break;\n      }\n      r.left = t;                               /* link right */\n      r = t;\n      t = t.left;\n    //} else if (i > t.key) {\n    } else if (cmp > 0) {\n      if (t.right === null) break;\n      //if (i > t.right.key) {\n      if (comparator(i, t.right.key) > 0) {\n        y = t.right;                          /* rotate left */\n        t.right = y.left;\n        y.left = t;\n        t = y;\n        if (t.right === null) break;\n      }\n      l.right = t;                              /* link left */\n      l = t;\n      t = t.right;\n    } else {\n      break;\n    }\n  }\n  /* assemble */\n  l.right = t.left;\n  r.left = t.right;\n  t.left = N.right;\n  t.right = N.left;\n  return t;\n}\n\n\n/**\n * @param  {Key}        i\n * @param  {Value}      data\n * @param  {Comparator} comparator\n * @param  {Tree}       tree\n * @return {Node}      root\n */\nfunction insert (i, data, t, comparator, tree) {\n  const node = new Node(i, data);\n\n  tree._size++;\n\n  if (t === null) {\n    node.left = node.right = null;\n    return node;\n  }\n\n  t = splay(i, t, comparator);\n  const cmp = comparator(i, t.key);\n  if (cmp < 0) {\n    node.left = t.left;\n    node.right = t;\n    t.left = null;\n  } else if (cmp >= 0) {\n    node.right = t.right;\n    node.left = t;\n    t.right = null;\n  }\n  return node;\n}\n\n\n/**\n * Insert i into the tree t, unless it's already there.\n * @param  {Key}        i\n * @param  {Value}      data\n * @param  {Comparator} comparator\n * @param  {Tree}       tree\n * @return {Node}       root\n */\nfunction add (i, data, t, comparator, tree) {\n  const node = new Node(i, data);\n\n  if (t === null) {\n    node.left = node.right = null;\n    tree._size++;\n    return node;\n  }\n\n  t = splay(i, t, comparator);\n  const cmp = comparator(i, t.key);\n  if (cmp === 0) return t;\n  else {\n    if (cmp < 0) {\n      node.left = t.left;\n      node.right = t;\n      t.left = null;\n    } else if (cmp > 0) {\n      node.right = t.right;\n      node.left = t;\n      t.right = null;\n    }\n    tree._size++;\n    return node;\n  }\n}\n\n\n/**\n * Deletes i from the tree if it's there\n * @param {Key}        i\n * @param {Tree}       tree\n * @param {Comparator} comparator\n * @param {Tree}       tree\n * @return {Node}      new root\n */\nfunction remove (i, t, comparator, tree) {\n  let x;\n  if (t === null) return null;\n  t = splay(i, t, comparator);\n  var cmp = comparator(i, t.key);\n  if (cmp === 0) {               /* found it */\n    if (t.left === null) {\n      x = t.right;\n    } else {\n      x = splay(i, t.left, comparator);\n      x.right = t.right;\n    }\n    tree._size--;\n    return x;\n  }\n  return t;                         /* It wasn't there */\n}\n\n\nfunction split (key, v, comparator) {\n  let left, right;\n  if (v === null) {\n    left = right = null;\n  } else {\n    v = splay(key, v, comparator);\n\n    const cmp = comparator(v.key, key);\n    if (cmp === 0) {\n      left  = v.left;\n      right = v.right;\n    } else if (cmp < 0) {\n      right   = v.right;\n      v.right = null;\n      left    = v;\n    } else {\n      left   = v.left;\n      v.left = null;\n      right  = v;\n    }\n  }\n  return { left, right };\n}\n\n\nfunction merge (left, right, comparator) {\n  if (right === null) return left;\n  if (left  === null) return right;\n\n  right = splay(left.key, right, comparator);\n  right.left = left;\n  return right;\n}\n\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Array<string>}               out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction printRow (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  printRow(root.left,  indent, false, out, printNode);\n    if (root.right) printRow(root.right, indent, true,  out, printNode);\n  }\n}\n\n\nexport default class Tree {\n\n  constructor (comparator = DEFAULT_COMPARE) {\n    this._comparator = comparator;\n    this._root = null;\n    this._size = 0;\n  }\n\n\n  /**\n   * Inserts a key, allows duplicates\n   * @param  {Key}    key\n   * @param  {Value=} data\n   * @return {Node|null}\n   */\n  insert (key, data) {\n    return this._root = insert(key, data, this._root, this._comparator, this);\n  }\n\n\n  /**\n   * Adds a key, if it is not present in the tree\n   * @param  {Key}    key\n   * @param  {Value=} data\n   * @return {Node|null}\n   */\n  add (key, data) {\n    return this._root = add(key, data, this._root, this._comparator, this);\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Node|null}\n   */\n  remove (key) {\n    this._root = remove(key, this._root, this._comparator, this);\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    let node = this._root;\n    if (node) {\n      while (node.left) node = node.left;\n      this._root = splay(node.key,  this._root, this._comparator);\n      this._root = remove(node.key, this._root, this._comparator, this);\n      return { key: node.key, data: node.data };\n    }\n    return null;\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Node|null}\n   */\n  findStatic (key) {\n    let current   = this._root;\n    const compare = this._comparator;\n    while (current) {\n      const cmp = compare(key, current.key);\n      if (cmp === 0)    return current;\n      else if (cmp < 0) current = current.left;\n      else              current = current.right;\n    }\n    return null;\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Node|null}\n   */\n  find (key) {\n    if (this._root) {\n      this._root = splay(key, this._root, this._comparator);\n      if (this._comparator(key, this._root.key) !== 0) return null;\n    }\n    return this._root;\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Boolean}\n   */\n  contains (key) {\n    let current   = this._root;\n    const compare = this._comparator;\n    while (current) {\n      const cmp = compare(key, current.key);\n      if (cmp === 0)    return true;\n      else if (cmp < 0) current = current.left;\n      else              current = current.right;\n    }\n    return false;\n  }\n\n\n  /**\n   * @param  {Visitor} visitor\n   * @param  {*=}      ctx\n   * @return {SplayTree}\n   */\n  forEach (visitor, ctx) {\n    let current = this._root;\n    const Q = [];  /* Initialize stack s */\n    let done = false;\n\n    while (!done) {\n      if (current !==  null) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length !== 0) {\n          current = Q.pop();\n          visitor.call(ctx, current);\n\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range (low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Returns array of keys\n   * @return {Array<Key>}\n   */\n  keys () {\n    const keys = [];\n    this.forEach(({ key }) => keys.push(key));\n    return keys;\n  }\n\n\n  /**\n   * Returns array of all the data in the nodes\n   * @return {Array<Value>}\n   */\n  values () {\n    const values = [];\n    this.forEach(({ data }) => values.push(data));\n    return values;\n  }\n\n\n  /**\n   * @return {Key|null}\n   */\n  min() {\n    if (this._root) return this.minNode(this._root).key;\n    return null;\n  }\n\n\n  /**\n   * @return {Key|null}\n   */\n  max() {\n    if (this._root) return this.maxNode(this._root).key;\n    return null;\n  }\n\n\n  /**\n   * @return {Node|null}\n   */\n  minNode(t = this._root) {\n    if (t) while (t.left) t = t.left;\n    return t;\n  }\n\n\n  /**\n   * @return {Node|null}\n   */\n  maxNode(t = this._root) {\n    if (t) while (t.right) t = t.right;\n    return t;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    let current = this._root, done = false, i = 0;\n    const Q = [];\n\n    while (!done) {\n      if (current) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length > 0) {\n          current = Q.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * @param  {Node}   d\n   * @return {Node|null}\n   */\n  next (d) {\n    let root = this._root;\n    let successor = null;\n\n    if (d.right) {\n      successor = d.right;\n      while (successor.left) successor = successor.left;\n      return successor;\n    }\n\n    const comparator = this._comparator;\n    while (root) {\n      const cmp = comparator(d.key, root.key);\n      if (cmp === 0) break;\n      else if (cmp < 0) {\n        successor = root;\n        root = root.left;\n      } else root = root.right;\n    }\n\n    return successor;\n  }\n\n\n  /**\n   * @param  {Node} d\n   * @return {Node|null}\n   */\n  prev (d) {\n    let root = this._root;\n    let predecessor = null;\n\n    if (d.left !== null) {\n      predecessor = d.left;\n      while (predecessor.right) predecessor = predecessor.right;\n      return predecessor;\n    }\n\n    const comparator = this._comparator;\n    while (root) {\n      const cmp = comparator(d.key, root.key);\n      if (cmp === 0) break;\n      else if (cmp < 0) root = root.left;\n      else {\n        predecessor = root;\n        root = root.right;\n      }\n    }\n    return predecessor;\n  }\n\n\n  /**\n   * @return {SplayTree}\n   */\n  clear() {\n    this._root = null;\n    this._size = 0;\n    return this;\n  }\n\n\n  /**\n   * @return {NodeList}\n   */\n  toList() {\n    return toList(this._root);\n  }\n\n\n  /**\n   * Bulk-load items. Both array have to be same size\n   * @param  {Array<Key>}    keys\n   * @param  {Array<Value>}  [values]\n   * @param  {Boolean}       [presort=false] Pre-sort keys and values, using\n   *                                         tree's comparator. Sorting is done\n   *                                         in-place\n   * @return {AVLTree}\n   */\n  load (keys = [], values = [], presort = false) {\n    let size = keys.length;\n    const comparator = this._comparator;\n\n    // sort if needed\n    if (presort) sort(keys, values, 0, size - 1, comparator);\n\n    if (this._root === null) { // empty tree\n      this._root = loadRecursive(this._root, keys, values, 0, size);\n      this._size = size;\n    } else { // that re-builds the whole tree from two in-order traversals\n      const mergedList = mergeLists(this.toList(), createList(keys, values), comparator);\n      size = this._size + size;\n      this._root = sortedListToBST({ head: mergedList }, 0, size);\n    }\n    return this;\n  }\n\n\n  /**\n   * @return {Boolean}\n   */\n  isEmpty() { return this._root === null; }\n\n  get size () { return this._size; }\n\n\n  /**\n   * @param  {NodePrinter=} printNode\n   * @return {String}\n   */\n  toString (printNode = (n) => n.key) {\n    const out = [];\n    printRow(this._root, '', true, (v) => out.push(v), printNode);\n    return out.join('');\n  }\n\n\n  update (key, newKey, newData) {\n    const comparator = this._comparator;\n    let { left, right } = split(key, this._root, comparator);\n    this._size--;\n    if (comparator(key, newKey) < 0) {\n      right = insert(newKey, newData, right, comparator, this);\n    } else {\n      left = insert(newKey, newData, left, comparator, this);\n    }\n    this._root = merge(left, right, comparator);\n  }\n\n\n  split(key) {\n    return split(key, this._root, this._comparator);\n  }\n}\n\n\nfunction loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\n\nfunction createList(keys, values) {\n  const head = { next: null };\n  let p = head;\n  for (let i = 0; i < keys.length; i++) {\n    p = p.next = { key: keys[i], data: values[i] };\n  }\n  p.next = null;\n  return head.next;\n}\n\n\nfunction toList (root) {\n  var current = root;\n  var Q = [], done = false;\n\n  const head = { next: null };\n  let p = head;\n\n  while (!done) {\n    if (current) {\n      Q.push(current);\n      current = current.left;\n    } else {\n      if (Q.length > 0) {\n        current = p = p.next = Q.pop();\n        current = current.right;\n      } else done = true;\n    }\n  }\n  p.next = null; // that'll work even if the tree was empty\n  return head.next;\n}\n\n\nfunction sortedListToBST(list, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const left = sortedListToBST(list, start, middle);\n\n    const root = list.head;\n    root.left = left;\n\n    list.head = list.head.next;\n\n    root.right = sortedListToBST(list, middle + 1, end);\n    return root;\n  }\n  return null;\n}\n\n\nfunction mergeLists (l1, l2, compare = (a, b) => a - b) {\n  const head = {}; // dummy\n  let p = head;\n\n  let p1 = l1;\n  let p2 = l2;\n\n  while (p1 !== null && p2 !== null) {\n    if (compare(p1.key, p2.key) < 0) {\n      p.next = p1;\n      p1 = p1.next;\n    } else {\n      p.next = p2;\n      p2 = p2.next;\n    }\n    p = p.next;\n  }\n\n  if (p1 !== null)      p.next = p1;\n  else if (p2 !== null) p.next = p2;\n\n  return head.next;\n}\n\n\nfunction sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n","/* Javascript doesn't do integer math. Everything is\n * floating point with percision Number.EPSILON.\n *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n */\n\nlet epsilon = Number.EPSILON\n\n// IE Polyfill\nif (epsilon === undefined) epsilon = Math.pow(2, -52)\n\nconst EPSILON_SQ = epsilon * epsilon\n\n/* FLP comparator */\nexport const cmp = (a, b) => {\n  // check if they're both 0\n  if (-epsilon < a && a < epsilon) {\n    if (-epsilon < b && b < epsilon) {\n      return 0\n    }\n  }\n\n  // check if they're flp equal\n  if ((a - b) * (a - b) < EPSILON_SQ * a * b) {\n    return 0\n  }\n\n  // normal comparison\n  return a < b ? -1 : 1\n}\n\n/* Greedy comparison. Two numbers are defined to touch\n * if their midpoint is indistinguishable from either. */\nexport const touch = (a, b) => {\n  const m = (a + b) / 2\n  return cmp(m, a) === 0 || cmp(m, b) === 0\n}\n\n/* Greedy comparison. Two points are defined to touch\n * if their midpoint is indistinguishable from either. */\nexport const touchPoints = (aPt, bPt) => {\n  // call directly to (skip touch()) cmp() for performance boost\n  const mx = (aPt.x + bPt.x) / 2\n  const aXMiss = cmp(mx, aPt.x) !== 0\n  if (aXMiss && cmp(mx, bPt.x) !== 0) return false\n\n  const my = (aPt.y + bPt.y) / 2\n  const aYMiss = cmp(my, aPt.y) !== 0\n  if (aYMiss && cmp(my, bPt.y) !== 0) return false\n\n  // we have touching on both x & y, we have to make sure it's\n  // not just on opposite points thou\n  if (aYMiss && aYMiss) return true\n  if (!aYMiss && !aYMiss) return true\n  return false\n}\n","import { cmp } from './flp'\n\n/* Cross Product of two vectors with first point at origin */\nexport const crossProduct = (a, b) => a.x * b.y - a.y * b.x\n\n/* Dot Product of two vectors with first point at origin */\nexport const dotProduct = (a, b) => a.x * b.x + a.y * b.y\n\n/* Comparator for two vectors with same starting point */\nexport const compareVectorAngles = (basePt, endPt1, endPt2) => {\n  const v1 = { x: endPt1.x - basePt.x, y: endPt1.y - basePt.y }\n  const v2 = { x: endPt2.x - basePt.x, y: endPt2.y - basePt.y }\n  const kross = crossProduct(v1, v2)\n  return cmp(kross, 0)\n}\n\nexport const length = v => Math.sqrt(dotProduct(v, v))\n\n/* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const sineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y }\n  const vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y }\n  return crossProduct(vAngle, vBase) / length(vAngle) / length(vBase)\n}\n\n/* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const cosineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y }\n  const vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y }\n  return dotProduct(vAngle, vBase) / length(vAngle) / length(vBase)\n}\n\n/* Get the closest point on an line (defined by two points)\n * to another point. */\nexport const closestPoint = (ptA1, ptA2, ptB) => {\n  if (ptA1.x === ptA2.x) return { x: ptA1.x, y: ptB.y } // vertical vector\n  if (ptA1.y === ptA2.y) return { x: ptB.x, y: ptA1.y } // horizontal vector\n\n  // determinne which point is further away\n  const v1 = { x: ptA1.x - ptB.x, y: ptA1.y - ptB.y }\n  const v2 = { x: ptA2.x - ptB.x, y: ptA2.y - ptB.y }\n  let nearPt = ptA1\n  let farPt = ptA2\n  if (dotProduct(v1, v1) > dotProduct(v2, v2)) {\n    farPt = ptA1\n    nearPt = ptA2\n  }\n\n  // use the further point as our base in the calculation, so that the\n  // vectors are more parallel, providing more accurate dot product\n  const vA = { x: nearPt.x - farPt.x, y: nearPt.y - farPt.y }\n  const vB = { x: ptB.x - farPt.x, y: ptB.y - farPt.y }\n  const dist = dotProduct(vA, vB) / dotProduct(vA, vA)\n  return { x: farPt.x + dist * vA.x, y: farPt.y + dist * vA.y }\n}\n\n/* Get the x coordinate where the given line (defined by a point and vector)\n * crosses the horizontal line with the given y coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const horizontalIntersection = (pt, v, y) => {\n  if (v.y === 0) return null\n  return { x: pt.x + v.x / v.y * ( y - pt.y ), y: y }\n}\n\n/* Get the y coordinate where the given line (defined by a point and vector)\n * crosses the vertical line with the given x coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const verticalIntersection = (pt, v, x) => {\n  if (v.x === 0) return null\n  return { x: x, y: pt.y + v.y / v.x * ( x - pt.x ) }\n}\n\n/* Get the intersection of two lines, each defined by a base point and a vector.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const intersection = (pt1, v1, pt2, v2) => {\n  // take some shortcuts for vertical and horizontal lines\n  // this also ensures we don't calculate an intersection and then discover\n  // it's actually outside the bounding box of the line\n  if (v1.x === 0) return verticalIntersection(pt2, v2, pt1.x)\n  if (v2.x === 0) return verticalIntersection(pt1, v1, pt2.x)\n  if (v1.y === 0) return horizontalIntersection(pt2, v2, pt1.y)\n  if (v2.y === 0) return horizontalIntersection(pt1, v1, pt2.y)\n\n  // General case for non-overlapping segments.\n  // This algorithm is based on Schneider and Eberly.\n  // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244\n\n  const kross = crossProduct(v1, v2)\n  if (kross == 0) return null\n\n  const ve = { x: pt2.x - pt1.x, y: pt2.y - pt1.y }\n  const d1 = crossProduct(ve, v1) / kross\n  const d2 = crossProduct(ve, v2) / kross\n\n  // take the average of the two calculations to minimize rounding error\n  const x1 = pt1.x + d2 * v1.x, x2 = pt2.x + d1 * v2.x\n  const y1 = pt1.y + d2 * v1.y, y2 = pt2.y + d1 * v2.y\n  const x = (x1 + x2) / 2\n  const y = (y1 + y2) / 2\n  return { x: x, y: y }\n}\n\n/* Given a vector, return one that is perpendicular */\nexport const perpendicular = (v) => {\n  return { x: -v.y, y: v.x }\n}\n","import { cmp } from './flp'\nimport SplayTree from 'splaytree'\n\n/**\n * This class rounds incoming values sufficiently so that\n * floating points problems are, for the most part, avoided.\n *\n * Incoming points are have their x & y values tested against\n * all previously seen x & y values. If either is 'too close'\n * to a previously seen value, it's value is 'snapped' to the\n * previously seen value.\n *\n * All points should be rounded by this class before being\n * stored in any data structures in the rest of this algorithm.\n */\n\nclass PtRounder {\n  constructor () {\n    this.reset()\n  }\n\n  reset () {\n    this.xRounder = new CoordRounder()\n    this.yRounder = new CoordRounder()\n  }\n\n  round (x, y) {\n    return {\n      x: this.xRounder.round(x),\n      y: this.yRounder.round(y),\n    }\n  }\n}\n\nclass CoordRounder {\n  constructor () {\n    this.tree = new SplayTree()\n    // preseed with 0 so we don't end up with values < Number.EPSILON\n    this.round(0)\n  }\n\n  // Note: this can rounds input values backwards or forwards.\n  //       You might ask, why not restrict this to just rounding\n  //       forwards? Wouldn't that allow left endpoints to always\n  //       remain left endpoints during splitting (never change to\n  //       right). No - it wouldn't, because we snap intersections\n  //       to endpoints (to establish independence from the segment\n  //       angle for t-intersections).\n  round (coord) {\n    const node = this.tree.add(coord)\n\n    const prevNode = this.tree.prev(node)\n    if (prevNode !== null && cmp(node.key, prevNode.key) === 0) {\n      this.tree.remove(coord)\n      return prevNode.key\n    }\n\n    const nextNode = this.tree.next(node)\n    if (nextNode !== null && cmp(node.key, nextNode.key) === 0) {\n      this.tree.remove(coord)\n      return nextNode.key\n    }\n\n    return coord\n  }\n}\n\n// singleton available by import\nconst rounder = new PtRounder()\n\nexport default rounder\n","import { compareVectorAngles } from './vector'\nimport rounder from './rounder'\n\n/* Given input geometry as a standard array-of-arrays geojson-style\n * geometry, return one that uses objects as points, for better perf */\nexport const pointsAsObjects = geom => {\n  // we can handle well-formed multipolys and polys\n  const output = []\n  if (!Array.isArray(geom)) {\n    throw new Error('Input is not a Polygon or MultiPolygon')\n  }\n  for (let i = 0, iMax = geom.length; i < iMax; i++) {\n    if (!Array.isArray(geom[i]) || geom[i].length == 0) {\n      throw new Error('Input is not a Polygon or MultiPolygon')\n    }\n    output.push([])\n    for (let j = 0, jMax = geom[i].length; j < jMax; j++) {\n      if (!Array.isArray(geom[i][j]) || geom[i][j].length == 0) {\n        throw new Error('Input is not a Polygon or MultiPolygon')\n      }\n      if (Array.isArray(geom[i][j][0])) { // multipolygon\n        output[i].push([])\n        for (let k = 0, kMax = geom[i][j].length; k < kMax; k++) {\n          if (!Array.isArray(geom[i][j][k]) || geom[i][j][k].length < 2) {\n            throw new Error('Input is not a Polygon or MultiPolygon')\n          }\n          if (geom[i][j][k].length > 2) {\n            throw new Error(\n              'Input has more than two coordinates. ' +\n              'Only 2-dimensional polygons supported.'\n            )\n          }\n          output[i][j].push(rounder.round(geom[i][j][k][0], geom[i][j][k][1]))\n        }\n      } else { // polygon\n        if (geom[i][j].length < 2) {\n          throw new Error('Input is not a Polygon or MultiPolygon')\n        }\n        if (geom[i][j].length > 2) {\n          throw new Error(\n            'Input has more than two coordinates. ' +\n            'Only 2-dimensional polygons supported.'\n          )\n        }\n        output[i].push(rounder.round(geom[i][j][0], geom[i][j][1]))\n      }\n    }\n  }\n  return output\n}\n\n/* WARN: input modified directly */\nexport const forceMultiPoly = geom => {\n  if (Array.isArray(geom)) {\n    if (geom.length === 0) return // allow empty multipolys\n\n    if (Array.isArray(geom[0])) {\n      if (Array.isArray(geom[0][0])) {\n        if (\n          typeof geom[0][0][0].x === 'number' &&\n          typeof geom[0][0][0].y === 'number'\n        ) {\n          // multipolygon\n          return\n        }\n      }\n      if (\n        typeof geom[0][0].x === 'number' &&\n        typeof geom[0][0].y === 'number'\n      ) {\n        // polygon\n        geom.unshift(geom.splice(0))\n        return\n      }\n    }\n  }\n  throw new Error('Unrecognized input - not a polygon nor multipolygon')\n}\n\n/* WARN: input modified directly */\nexport const cleanMultiPoly = multipoly => {\n  let i = 0\n  while (i < multipoly.length) {\n    const poly = multipoly[i]\n    if (poly.length === 0) {\n      multipoly.splice(i, 1)\n      continue\n    }\n\n    const exteriorRing = poly[0]\n    cleanRing(exteriorRing)\n    // poly is dropped if exteriorRing is degenerate\n    if (exteriorRing.length === 0) {\n      multipoly.splice(i, 1)\n      continue\n    }\n\n    let j = 1\n    while (j < poly.length) {\n      const interiorRing = poly[j]\n      cleanRing(interiorRing)\n      if (interiorRing.length === 0) poly.splice(j, 1)\n      else j++\n    }\n\n    i++\n  }\n}\n\n/* Clean ring:\n *  - remove duplicate points\n *  - remove colinear points\n *  - remove rings with no area (less than 3 distinct points)\n *  - un-close rings (last point should not repeat first)\n *\n * WARN: input modified directly */\nexport const cleanRing = ring => {\n  if (ring.length === 0) return\n  const firstPt = ring[0]\n  const lastPt = ring[ring.length - 1]\n  if (firstPt.x === lastPt.x && firstPt.y === lastPt.y) ring.pop()\n\n  const isPointUncessary = (prevPt, pt, nextPt) =>\n    (prevPt.x === pt.x && prevPt.y === pt.y) ||\n    (nextPt.x === pt.x && nextPt.y === pt.y) ||\n    compareVectorAngles(pt, prevPt, nextPt) === 0\n\n  let i = 0\n  let prevPt, nextPt\n  while (i < ring.length) {\n    prevPt = (i === 0 ? ring[ring.length - 1] : ring[i - 1])\n    nextPt = (i === ring.length - 1 ? ring[0] : ring[i + 1])\n    if (isPointUncessary(prevPt, ring[i], nextPt)) ring.splice(i, 1)\n    else i++\n  }\n\n  // if our ring has less than 3 distinct points now (so is degenerate)\n  // shrink it down to the empty array to communicate to our caller to\n  // drop it\n  while (ring.length < 3 && ring.length > 0) ring.pop()\n}\n","import Segment from './segment'\nimport { cosineOfAngle, sineOfAngle } from './vector'\n\nexport default class SweepEvent {\n\n  // for ordering sweep events in the sweep event queue\n  static compare (a, b) {\n\n    // favor event with a point that the sweep line hits first\n    const ptCmp = SweepEvent.comparePoints(a.point, b.point)\n    if (ptCmp !== 0) return ptCmp\n\n    // the points are the same, so link them if needed\n    if (a.point !== b.point) a.link(b)\n\n    // favor right events over left\n    if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1\n\n    // we have two matching left or right endpoints\n    // ordering of this case is the same as for their segments\n    return Segment.compare(a.segment, b.segment)\n  }\n\n  // for ordering points in sweep line order\n  static comparePoints (aPt, bPt) {\n    if (aPt.x < bPt.x) return -1\n    if (aPt.x > bPt.x) return 1\n\n    if (aPt.y < bPt.y) return -1\n    if (aPt.y > bPt.y) return 1\n\n    return 0\n  }\n\n  // Warning: 'point' input will be modified and re-used (for performance)\n  constructor (point, isLeft) {\n    if (point.events === undefined) point.events = [this]\n    else point.events.push(this)\n    this.point = point\n    this.isLeft = isLeft\n    // this.segment, this.otherSE set by factory\n  }\n\n  link (other) {\n    if (other.point === this.point) {\n      throw new Error('Tried to link already linked events')\n    }\n    const otherEvents = other.point.events\n    for (let i = 0, iMax = otherEvents.length; i < iMax; i++) {\n      const evt = otherEvents[i]\n      this.point.events.push(evt)\n      evt.point = this.point\n    }\n    this.checkForConsuming()\n  }\n\n  /* Do a pass over our linked events and check to see if any pair\n   * of segments match, and should be consumed. */\n  checkForConsuming () {\n    // FIXME: The loops in this method run O(n^2) => no good.\n    //        Maintain little ordered sweep event trees?\n    //        Can we maintaining an ordering that avoids the need\n    //        for the re-sorting with getLeftmostComparator in geom-out?\n\n    // Compare each pair of events to see if other events also match\n    const numEvents = this.point.events.length\n    for (let i = 0; i < numEvents; i++) {\n      const evt1 = this.point.events[i]\n      if (evt1.segment.consumedBy !== undefined) continue\n      for (let j = i + 1; j < numEvents; j++) {\n        const evt2 = this.point.events[j]\n        if (evt2.consumedBy !== undefined) continue\n        if (evt1.otherSE.point.events !== evt2.otherSE.point.events) continue\n        evt1.segment.consume(evt2.segment)\n      }\n    }\n  }\n\n  getAvailableLinkedEvents () {\n    // point.events is always of length 2 or greater\n    const events = []\n    for (let i = 0, iMax = this.point.events.length; i < iMax; i++) {\n      const evt = this.point.events[i]\n      if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {\n        events.push(evt)\n      }\n    }\n    return events\n  }\n\n  /**\n   * Returns a comparator function for sorting linked events that will\n   * favor the event that will give us the smallest left-side angle.\n   * All ring construction starts as low as possible heading to the right,\n   * so by always turning left as sharp as possible we'll get polygons\n   * without uncessary loops & holes.\n   *\n   * The comparator function has a compute cache such that it avoids\n   * re-computing already-computed values.\n   */\n  getLeftmostComparator (baseEvent) {\n    const cache = new Map()\n\n    const fillCache = linkedEvent => {\n      const nextEvent = linkedEvent.otherSE\n      cache.set(linkedEvent, {\n        sine: sineOfAngle(this.point, baseEvent.point, nextEvent.point),\n        cosine: cosineOfAngle(this.point, baseEvent.point, nextEvent.point)\n      })\n    }\n\n    return (a, b) => {\n      if (!cache.has(a)) fillCache(a)\n      if (!cache.has(b)) fillCache(b)\n\n      const { sine: asine, cosine: acosine } = cache.get(a)\n      const { sine: bsine, cosine: bcosine } = cache.get(b)\n\n      // both on or above x-axis\n      if (asine >= 0 && bsine >= 0) {\n        if (acosine < bcosine) return 1\n        if (acosine > bcosine) return -1\n        return 0\n      }\n\n      // both below x-axis\n      if (asine < 0 && bsine < 0) {\n        if (acosine < bcosine) return -1\n        if (acosine > bcosine) return 1\n        return 0\n      }\n\n      // one above x-axis, one below\n      if (bsine < asine) return -1\n      if (bsine > asine) return 1\n      return 0\n    }\n  }\n}\n","import operation from './operation'\nimport SweepEvent from './sweep-event'\nimport { isInBbox, touchesBbox, getBboxOverlap } from './bbox'\nimport { touchPoints } from './flp'\nimport { closestPoint, intersection } from './vector'\nimport rounder from './rounder'\n\n// Give segments unique ID's to get consistent sorting of\n// segments and sweep events when all else is identical\nlet segmentId = 0\n\nexport default class Segment {\n\n  /* This compare() function is for ordering segments in the sweep\n   * line tree, and does so according to the following criteria:\n   *\n   * Consider the vertical line that lies an infinestimal step to the\n   * right of the right-more of the two left endpoints of the input\n   * segments. Imagine slowly moving a point up from negative infinity\n   * in the increasing y direction. Which of the two segments will that\n   * point intersect first? That segment comes 'before' the other one.\n   *\n   * If neither segment would be intersected by such a line, (if one\n   * or more of the segments are vertical) then the line to be considered\n   * is directly on the right-more of the two left inputs.\n   */\n  static compare (a, b) {\n\n    const alx = a.leftSE.point.x\n    const blx = b.leftSE.point.x\n    const arx = a.rightSE.point.x\n    const brx = b.rightSE.point.x\n\n    // check if they're even in the same vertical plane\n    if (brx < alx) return 1\n    if (arx < blx) return -1\n\n    const aly = a.leftSE.point.y\n    const bly = b.leftSE.point.y\n    const ary = a.rightSE.point.y\n    const bry = b.rightSE.point.y\n\n    // is left endpoint of segment B the right-more?\n    if (alx < blx) {\n      // are the two segments in the same horizontal plane?\n      if (bly < aly && bly < ary) return 1\n      if (bly > aly && bly > ary) return -1\n\n      // is the B left endpoint colinear to segment A?\n      const aCmpBLeft = a.comparePoint(b.leftSE.point)\n      if (aCmpBLeft < 0) return 1\n      if (aCmpBLeft > 0) return -1\n\n      // is the A right endpoint colinear to segment B ?\n      const bCmpARight = b.comparePoint(a.rightSE.point)\n      if (bCmpARight !== 0) return bCmpARight\n\n      // colinear segments, consider the one with left-more\n      // left endpoint to be first (arbitrary?)\n      return -1\n    }\n\n    // is left endpoint of segment A the right-more?\n    if (alx > blx) {\n      if (aly < bly && aly < bry) return -1\n      if (aly > bly && aly > bry) return 1\n\n      // is the A left endpoint colinear to segment B?\n      const bCmpALeft = b.comparePoint(a.leftSE.point)\n      if (bCmpALeft !== 0) return bCmpALeft\n\n      // is the B right endpoint colinear to segment A?\n      const aCmpBRight = a.comparePoint(b.rightSE.point)\n      if (aCmpBRight < 0) return 1\n      if (aCmpBRight > 0) return -1\n\n      // colinear segments, consider the one with left-more\n      // left endpoint to be first (arbitrary?)\n      return 1\n    }\n\n    // if we get here, the two left endpoints are in the same\n    // vertical plane, ie alx === blx\n\n    // consider the lower left-endpoint to come first\n    if (aly < bly) return -1\n    if (aly > bly) return 1\n\n    // left endpoints are identical\n    // check for colinearity by using the left-more right endpoint\n\n    // is the A right endpoint more left-more?\n    if (arx < brx) {\n      const bCmpARight = b.comparePoint(a.rightSE.point)\n      if (bCmpARight !== 0) return bCmpARight\n\n      // colinear segments with matching left endpoints,\n      // consider the one with more left-more right endpoint to be first\n      return -1\n    }\n\n    // is the B right endpoint more left-more?\n    if (arx > brx) {\n      const aCmpBRight = a.comparePoint(b.rightSE.point)\n      if (aCmpBRight < 0) return 1\n      if (aCmpBRight > 0) return -1\n\n      // colinear segments with matching left endpoints,\n      // consider the one with more left-more right endpoint to be first\n      return 1\n    }\n\n    // if we get here, two two right endpoints are in the same\n    // vertical plane, ie arx === brx\n\n    // consider the lower right-endpoint to come first\n    if (ary < bry) return -1\n    if (ary > bry) return 1\n\n    // right endpoints identical as well, so the segments are idential\n    // fall back on creation order as consistent tie-breaker\n    if (a.id < b.id) return -1\n    if (a.id > b.id) return 1\n\n    // identical segment, ie a === b\n    return 0\n  }\n\n  /* Warning: a reference to ringsIn input will be stored,\n   *  and possibly will be later modified */\n  constructor (leftSE, rightSE, ringsIn) {\n    this.id = ++segmentId\n    this.leftSE = leftSE\n    leftSE.segment = this\n    leftSE.otherSE = rightSE\n    this.rightSE = rightSE\n    rightSE.segment = this\n    rightSE.otherSE = leftSE\n    this.ringsIn = ringsIn\n    this._cache = {}\n    // left unset for performance, set later in algorithm\n    // this.ringOut, this.consumedBy, this.prev\n  }\n\n  static fromRing(pt1, pt2, ring) {\n    let leftPt, rightPt\n\n    // ordering the two points according to sweep line ordering\n    const cmpPts = SweepEvent.comparePoints(pt1, pt2)\n    if (cmpPts < 0) {\n      leftPt = pt1\n      rightPt = pt2\n    }\n    else if (cmpPts > 0) {\n      leftPt = pt2\n      rightPt = pt1\n    }\n    else throw new Error(\n      `Tried to create degenerate segment at [${pt1.x}, ${pt1.y}]`\n    )\n\n    const leftSE = new SweepEvent(leftPt, true)\n    const rightSE = new SweepEvent(rightPt, false)\n    return new Segment(leftSE, rightSE, [ring])\n  }\n\n  /* When a segment is split, the rightSE is replaced with a new sweep event */\n  replaceRightSE (newRightSE) {\n    this.rightSE = newRightSE\n    this.rightSE.segment = this\n    this.rightSE.otherSE = this.leftSE\n    this.leftSE.otherSE = this.rightSE\n  }\n\n  bbox () {\n    const y1 = this.leftSE.point.y\n    const y2 = this.rightSE.point.y\n    return {\n      ll: { x: this.leftSE.point.x, y: y1 < y2 ? y1 : y2 },\n      ur: { x: this.rightSE.point.x, y: y1 > y2 ? y1 : y2 }\n    }\n  }\n\n  /* A vector from the left point to the right */\n  vector () {\n    return {\n      x: this.rightSE.point.x - this.leftSE.point.x,\n      y: this.rightSE.point.y - this.leftSE.point.y\n    }\n  }\n\n  isAnEndpoint (pt) {\n    return (\n      (pt.x === this.leftSE.point.x && pt.y === this.leftSE.point.y) ||\n      (pt.x === this.rightSE.point.x && pt.y === this.rightSE.point.y)\n    )\n  }\n\n  /* Compare this segment with a point. Return value indicates:\n   *     1: point lies above or to the left of segment\n   *     0: point is colinear to segment\n   *    -1: point is below or to the right of segment */\n  comparePoint (point) {\n    if (this.isAnEndpoint(point)) return 0\n    const interPt = closestPoint(this.leftSE.point, this.rightSE.point, point)\n\n    if (point.y < interPt.y) return -1\n    if (point.y > interPt.y) return 1\n\n    // depending on if our segment angles up or down,\n    // the x coord comparison means oppposite things\n    if (point.x < interPt.x) {\n      if (this.leftSE.point.y < this.rightSE.point.y) return 1\n      if (this.leftSE.point.y > this.rightSE.point.y) return -1\n    }\n    if (point.x > interPt.x) {\n      if (this.leftSE.point.y < this.rightSE.point.y) return -1\n      if (this.leftSE.point.y > this.rightSE.point.y) return 1\n    }\n\n    // on the line\n    return 0\n  }\n\n  /* Does the point in question touch the given segment?\n   * Greedy - essentially a 2 * Number.EPSILON comparison.\n   * If it's not possible to add an independent point between the\n   * point and the segment, we say the point 'touches' the segment. */\n  touches (point) {\n    if (!touchesBbox(this.bbox(), point)) return false\n    // if the points have been linked already, performance boost use that\n    if (point === this.leftSE.point || point === this.rightSE.point) return true\n    // avoid doing vector math on tiny vectors\n    if (touchPoints(this.leftSE.point, point)) return true\n    if (touchPoints(this.rightSE.point, point)) return true\n    const cPt1 = closestPoint(this.leftSE.point, this.rightSE.point, point)\n    const avgPt1 = { x: (cPt1.x + point.x) / 2, y: (cPt1.y + point.y) / 2 }\n    return touchPoints(avgPt1, cPt1) || touchPoints(avgPt1, point)\n  }\n\n  /**\n   * Given another segment, returns the first non-trivial intersection\n   * between the two segments (in terms of sweep line ordering), if it exists.\n   *\n   * A 'non-trivial' intersection is one that will cause one or both of the\n   * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:\n   *\n   *   * endpoint of segA with endpoint of segB --> trivial\n   *   * endpoint of segA with point along segB --> non-trivial\n   *   * endpoint of segB with point along segA --> non-trivial\n   *   * point along segA with point along segB --> non-trivial\n   *\n   * If no non-trivial intersection exists, return null\n   * Else, return null.\n   */\n  getIntersection (other) {\n    // If bboxes don't overlap, there can't be any intersections\n    const bboxOverlap = getBboxOverlap(this.bbox(), other.bbox())\n    if (bboxOverlap === null) return null\n\n    // We first check to see if the endpoints can be considered intersections.\n    // This will 'snap' intersections to endpoints if possible, and will\n    // handle cases of colinearity.\n\n    // does each endpoint touch the other segment?\n    const touchesOtherLSE = this.touches(other.leftSE.point)\n    const touchesThisLSE = other.touches(this.leftSE.point)\n    const touchesOtherRSE = this.touches(other.rightSE.point)\n    const touchesThisRSE = other.touches(this.rightSE.point)\n\n    // do left endpoints match?\n    if (touchesThisLSE && touchesOtherLSE) {\n      // these two cases are for colinear segments with matching left\n      // endpoints, and one segment being longer than the other\n      if (touchesThisRSE && !touchesOtherRSE) return this.rightSE.point\n      if (!touchesThisRSE && touchesOtherRSE) return other.rightSE.point\n      // either the two segments match exactly (two trival intersections)\n      // or just on their left endpoint (one trivial intersection\n      return null\n    }\n\n    // does this left endpoint matches (other doesn't)\n    if (touchesThisLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesOtherRSE && touchPoints(this.leftSE.point, other.rightSE.point)) return null\n      // t-intersection on left endpoint\n      return this.leftSE.point\n    }\n\n    // does other left endpoint matches (this doesn't)\n    if (touchesOtherLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesThisRSE && touchPoints(this.rightSE.point, other.leftSE.point)) return null\n      // t-intersection on left endpoint\n      return other.leftSE.point\n    }\n\n    // trivial intersection on right endpoints\n    if (touchesThisRSE && touchesOtherRSE) return null\n\n    // t-intersections on just one right endpoint\n    if (touchesThisRSE) return this.rightSE.point\n    if (touchesOtherRSE) return other.rightSE.point\n\n    // None of our endpoints intersect. Look for a general intersection between\n    // infinite lines laid over the segments\n    const pt = intersection(this.leftSE.point, this.vector(), other.leftSE.point, other.vector())\n\n    // are the segments parrallel? Note that if they were colinear with overlap,\n    // they would have an endpoint intersection and that case was already handled above\n    if (pt === null) return null\n\n    // is the intersection found between the lines not on the segments?\n    if (!isInBbox(bboxOverlap, pt)) return null\n\n    // round the the computed point if needed\n    return rounder.round(pt.x, pt.y)\n  }\n\n  /**\n   * Split the given segment into multiple segments on the given points.\n   *  * Each existing segment will retain its leftSE and a new rightSE will be\n   *    generated for it.\n   *  * A new segment will be generated which will adopt the original segment's\n   *    rightSE, and a new leftSE will be generated for it.\n   *  * If there are more than two points given to split on, new segments\n   *    in the middle will be generated with new leftSE and rightSE's.\n   *  * An array of the newly generated SweepEvents will be returned.\n   *\n   * Warning: input array of points is modified\n   */\n  split (point) {\n    const newEvents = []\n    const alreadyLinked = point.events !== undefined\n\n    const newLeftSE = new SweepEvent(point, true)\n    const newRightSE = new SweepEvent(point, false)\n    const oldRightSE = this.rightSE\n    this.replaceRightSE(newRightSE)\n    newEvents.push(newRightSE)\n    newEvents.push(newLeftSE)\n    new Segment(newLeftSE, oldRightSE, this.ringsIn.slice())\n\n    // in the point we just used to create new sweep events with was already\n    // linked to other events, we need to check if either of the affected\n    // segments should be consumed\n    if (alreadyLinked) {\n      newLeftSE.checkForConsuming()\n      newRightSE.checkForConsuming()\n    }\n\n    return newEvents\n  }\n\n  /* Consume another segment. We take their ringsIn under our wing\n   * and mark them as consumed. Use for perfectly overlapping segments */\n  consume (other) {\n    let consumer = this\n    let consumee = other\n    while (consumer.consumedBy) consumer = consumer.consumedBy\n    while (consumee.consumedBy) consumee = consumee.consumedBy\n\n    const cmp = Segment.compare(consumer, consumee)\n    if (cmp === 0) return  // already consumed\n    // the winner of the consumption is the earlier segment\n    // according to sweep line ordering\n    if (cmp  > 0) {\n      const tmp = consumer\n      consumer = consumee\n      consumee = tmp\n    }\n\n    // make sure a segment doesn't consume it's prev\n    if (consumer.prev === consumee) {\n      const tmp = consumer\n      consumer = consumee\n      consumee = tmp\n    }\n\n    for (let i = 0, iMax = consumee.ringsIn.length; i < iMax; i++) {\n      consumer.ringsIn.push(consumee.ringsIn[i])\n    }\n    consumee.ringsIn = null\n    consumee.consumedBy = consumer\n\n    // mark sweep events consumed as to maintain ordering in sweep event queue\n    consumee.leftSE.consumedBy = consumer.leftSE\n    consumee.rightSE.consumedBy = consumer.rightSE\n  }\n\n  /* The first segment previous segment chain that is in the result */\n  prevInResult () {\n    const key = 'prevInResult'\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\n    return this._cache[key]\n  }\n\n  _prevInResult () {\n    if (! this.prev) return null\n    if (this.prev.isInResult()) return this.prev\n    return this.prev.prevInResult()\n  }\n\n  ringsBefore () {\n    const key = 'ringsBefore'\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\n    return this._cache[key]\n  }\n\n  _ringsBefore () {\n    if (! this.prev) return []\n    return (this.prev.consumedBy || this.prev).ringsAfter()\n  }\n\n  ringsAfter () {\n    const key = 'ringsAfter'\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\n    return this._cache[key]\n  }\n\n  _ringsAfter () {\n    const rings = this.ringsBefore().slice(0)\n    for (let i = 0, iMax = this.ringsIn.length; i < iMax; i++) {\n      const ring = this.ringsIn[i]\n      const index = rings.indexOf(ring)\n      if (index === -1) rings.push(ring)\n      else rings.splice(index, 1)\n    }\n    return rings\n  }\n\n  multiPolysBefore () {\n    const key = 'multiPolysBefore'\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\n    return this._cache[key]\n  }\n\n  _multiPolysBefore () {\n    if (! this.prev) return []\n    return (this.prev.consumedBy || this.prev).multiPolysAfter()\n  }\n\n  multiPolysAfter () {\n    const key = 'multiPolysAfter'\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\n    return this._cache[key]\n  }\n\n  _multiPolysAfter () {\n    // first calcualte our polysAfter\n    const polysAfter = []\n    const polysExclude = []\n    const ringsAfter = this.ringsAfter()\n    for (let i = 0, iMax = ringsAfter.length; i < iMax; i++) {\n      const ring = ringsAfter[i]\n      const poly = ring.poly\n      if (polysExclude.indexOf(poly) !== -1) continue\n      if (ring.isExterior) polysAfter.push(poly)\n      else {\n        if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly)\n        const index = polysAfter.indexOf(ring.poly)\n        if (index !== -1) polysAfter.splice(index, 1)\n      }\n    }\n    // now calculate our multiPolysAfter\n    const mps = []\n    for (let i = 0, iMax = polysAfter.length; i < iMax; i++) {\n      const mp = polysAfter[i].multiPoly\n      if (mps.indexOf(mp) === -1) mps.push(mp)\n    }\n    return mps\n  }\n\n  /* Is this segment part of the final result? */\n  isInResult () {\n    const key = 'isInResult'\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\n    return this._cache[key]\n  }\n\n  _isInResult () {\n    // if we've been consumed, we're not in the result\n    if (this.consumedBy) return false\n\n    const mpsBefore = this.multiPolysBefore()\n    const mpsAfter = this.multiPolysAfter()\n\n    switch (operation.type) {\n      case 'union': {\n        // UNION - included iff:\n        //  * On one side of us there is 0 poly interiors AND\n        //  * On the other side there is 1 or more.\n        const noBefores = mpsBefore.length === 0\n        const noAfters = mpsAfter.length === 0\n        return noBefores !== noAfters\n      }\n\n      case 'intersection': {\n        // INTERSECTION - included iff:\n        //  * on one side of us all multipolys are rep. with poly interiors AND\n        //  * on the other side of us, not all multipolys are repsented\n        //    with poly interiors\n        let least\n        let most\n        if (mpsBefore.length < mpsAfter.length) {\n          least = mpsBefore.length\n          most = mpsAfter.length\n        } else {\n          least = mpsAfter.length\n          most = mpsBefore.length\n        }\n        return most === operation.numMultiPolys && least < most\n      }\n\n      case 'xor': {\n        // XOR - included iff:\n        //  * the difference between the number of multipolys represented\n        //    with poly interiors on our two sides is an odd number\n        const diff = Math.abs(mpsBefore.length - mpsAfter.length)\n        return diff % 2 === 1\n      }\n\n      case 'difference': {\n        // DIFFERENCE included iff:\n        //  * on exactly one side, we have just the subject\n        const isJustSubject = mps => mps.length === 1 && mps[0].isSubject\n        return isJustSubject(mpsBefore) !== isJustSubject(mpsAfter)\n      }\n\n      default:\n        throw new Error(`Unrecognized operation type found ${operation.type}`)\n    }\n  }\n\n}\n","import { touch } from './flp'\n\n/**\n * A bounding box has the format:\n *\n *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }\n *\n */\n\nexport const isInBbox = (bbox, point) => {\n  return (\n    (bbox.ll.x <= point.x) &&\n    (point.x <= bbox.ur.x) &&\n    (bbox.ll.y <= point.y) &&\n    (point.y <= bbox.ur.y)\n  )\n}\n\n/* Greedy comparison with a bbox. A point is defined to 'touch'\n * a bbox if:\n *  - it is inside the bbox\n *  - it 'touches' one of the sides (another greedy comparison) */\nexport const touchesBbox = (bbox, point) => {\n  return (\n    ((bbox.ll.x <= point.x) || touch(bbox.ll.x, point.x)) &&\n    ((point.x <= bbox.ur.x) || touch(point.x, bbox.ur.x)) &&\n    ((bbox.ll.y <= point.y) || touch(bbox.ll.y, point.y)) &&\n    ((point.y <= bbox.ur.y) || touch(point.y, bbox.ur.y))\n  )\n}\n\n/* Returns either null, or a bbox (aka an ordered pair of points)\n * If there is only one point of overlap, a bbox with identical points\n * will be returned */\nexport const getBboxOverlap = (b1, b2) => {\n  // check if the bboxes overlap at all\n  if (\n    b2.ur.x < b1.ll.x ||\n    b1.ur.x < b2.ll.x ||\n    b2.ur.y < b1.ll.y ||\n    b1.ur.y < b2.ll.y\n  ) return null\n\n  // find the middle two X values\n  const lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x\n  const upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x\n\n  // find the middle two Y values\n  const lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y\n  const upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y\n\n  // put those middle values together to get the overlap\n  return { ll: { x: lowerX, y: lowerY }, ur: { x: upperX, y: upperY } }\n}\n","import Segment from './segment'\n\nexport class RingIn {\n  constructor (geomRing, poly, isExterior) {\n    this.poly = poly\n    this.isExterior = isExterior\n    this.segments = []\n\n    let prevPoint = geomRing[0]\n    for (let i = 1, iMax = geomRing.length; i < iMax; i++) {\n      let point = geomRing[i]\n      this.segments.push(Segment.fromRing(prevPoint, point, this))\n      prevPoint = point\n    }\n    this.segments.push(Segment.fromRing(prevPoint, geomRing[0], this))\n  }\n\n  getSweepEvents () {\n    const sweepEvents = []\n    for (let i = 0, iMax = this.segments.length; i < iMax; i++) {\n      const segment = this.segments[i]\n      sweepEvents.push(segment.leftSE)\n      sweepEvents.push(segment.rightSE)\n    }\n    return sweepEvents\n  }\n}\n\nexport class PolyIn {\n  constructor (geomPoly, multiPoly) {\n    this.exteriorRing = new RingIn(geomPoly[0], this, true)\n    this.interiorRings = []\n    for (let i = 1, iMax = geomPoly.length; i < iMax; i++) {\n      this.interiorRings.push(new RingIn(geomPoly[i], this, false))\n    }\n    this.multiPoly = multiPoly\n  }\n\n  getSweepEvents () {\n    const sweepEvents = this.exteriorRing.getSweepEvents()\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringSweepEvents = this.interiorRings[i].getSweepEvents()\n      for (let j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(ringSweepEvents[j])\n      }\n    }\n    return sweepEvents\n  }\n}\n\nexport class MultiPolyIn {\n  constructor (geomMultiPoly) {\n    this.polys = []\n    for (let i = 0, iMax = geomMultiPoly.length; i < iMax; i++) {\n      this.polys.push(new PolyIn(geomMultiPoly[i], this))\n    }\n    this.isSubject = false\n  }\n\n  markAsSubject () {\n    this.isSubject = true\n  }\n\n  getSweepEvents () {\n    const sweepEvents = []\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polySweepEvents = this.polys[i].getSweepEvents()\n      for (let j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(polySweepEvents[j])\n      }\n    }\n    return sweepEvents\n  }\n}\n","import { compareVectorAngles } from './vector'\nimport SweepEvent from './sweep-event'\n\nexport class RingOut {\n  /* Given the segments from the sweep line pass, compute & return a series\n   * of closed rings from all the segments marked to be part of the result */\n  static factory (allSegments) {\n    const ringsOut = []\n\n    for (let i = 0, iMax = allSegments.length; i < iMax; i++) {\n      const segment = allSegments[i]\n      if (!segment.isInResult() || segment.ringOut) continue\n\n      let prevEvent = null\n      let event = segment.leftSE\n      let nextEvent = segment.rightSE\n      const events = [event]\n\n      const startingPoint = event.point\n      const intersectionLEs = []\n\n      /* Walk the chain of linked events to form a closed ring */\n      while (true) {\n        prevEvent = event\n        event = nextEvent\n        events.push(event)\n\n        /* Is the ring complete? */\n        if (event.point === startingPoint) break\n\n        while (true) {\n          const availableLEs = event.getAvailableLinkedEvents()\n\n          /* Did we hit a dead end? This shouldn't happen. Indicates some earlier\n           * part of the algorithm malfunctioned... please file a bug report. */\n          if (availableLEs.length === 0) {\n            const firstPt = events[0].point\n            const lastPt = events[events.length - 1].point\n            throw new Error(\n              `Unable to complete output ring starting at [${firstPt.x},` +\n                ` ${firstPt.y}]. Last matching segment found ends at` +\n                ` [${lastPt.x}, ${lastPt.y}].`\n            )\n          }\n\n          /* Only one way to go, so cotinue on the path */\n          if (availableLEs.length === 1) {\n            nextEvent = availableLEs[0].otherSE\n            break\n          }\n\n          /* We must have an intersection. Check for a completed loop */\n          let indexLE = null\n          for (let j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\n            if (intersectionLEs[j].point === event.point) {\n              indexLE = j\n              break\n            }\n          }\n          /* Found a completed loop. Cut that off and make a ring */\n          if (indexLE !== null) {\n            const intersectionLE = intersectionLEs.splice(indexLE)[0]\n            const ringEvents = events.splice(intersectionLE.index)\n            ringEvents.unshift(ringEvents[0].otherSE)\n            ringsOut.push(new RingOut(ringEvents.reverse()))\n            continue\n          }\n          /* register the intersection */\n          intersectionLEs.push({\n            index: events.length,\n            point: event.point,\n          })\n          /* Choose the left-most option to continue the walk */\n          const comparator = event.getLeftmostComparator(prevEvent)\n          nextEvent = availableLEs.sort(comparator)[0].otherSE\n          break\n        }\n      }\n\n      ringsOut.push(new RingOut(events))\n    }\n    return ringsOut\n  }\n\n  constructor (events) {\n    this.events = events\n    for (let i = 0, iMax = events.length; i < iMax; i++) {\n      events[i].segment.ringOut = this\n    }\n    this.poly = null\n  }\n\n  getGeom () {\n    // Remove superfluous points (ie extra points along a straight line),\n    let prevPt = this.events[0].point\n    const points = [prevPt]\n    for (let i = 1, iMax = this.events.length - 1; i < iMax; i++) {\n      const pt = this.events[i].point\n      const nextPt = this.events[i + 1].point\n      if (compareVectorAngles(pt, prevPt, nextPt) === 0) continue\n      points.push(pt)\n      prevPt = pt\n    }\n\n    // ring was all (within rounding error of angle calc) colinear points\n    if (points.length === 1) return null\n\n    // check if the starting point is necessary\n    const pt = points[0]\n    const nextPt = points[1]\n    if (compareVectorAngles(pt, prevPt, nextPt) === 0) points.shift()\n\n    points.push(points[0])\n    const step = this.isExteriorRing() ? 1 : -1\n    const iStart = this.isExteriorRing() ? 0 : points.length - 1\n    const iEnd = this.isExteriorRing() ? points.length : -1\n    const orderedPoints = []\n    for (let i = iStart; i != iEnd; i += step) orderedPoints.push([points[i].x, points[i].y])\n    return orderedPoints\n  }\n\n  isExteriorRing () {\n    if (this._isExteriorRing === undefined) {\n      const enclosing = this.enclosingRing()\n      this._isExteriorRing = enclosing ? ! enclosing.isExteriorRing() : true\n    }\n    return this._isExteriorRing\n  }\n\n  enclosingRing () {\n    if (this._enclosingRing === undefined) {\n      this._enclosingRing = this._calcEnclosingRing()\n    }\n    return this._enclosingRing\n  }\n\n  /* Returns the ring that encloses this one, if any */\n  _calcEnclosingRing () {\n    // start with the ealier sweep line event so that the prevSeg\n    // chain doesn't lead us inside of a loop of ours\n    let leftMostEvt = this.events[0]\n    for (let i = 1, iMax = this.events.length; i < iMax; i++) {\n      const evt = this.events[i]\n      if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt\n    }\n\n    let prevSeg = leftMostEvt.segment.prevInResult()\n    let prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null\n\n    while (true) {\n      // no segment found, thus no ring can enclose us\n      if (!prevSeg) return null\n\n      // no segments below prev segment found, thus the ring of the prev\n      // segment must loop back around and enclose us\n      if (!prevPrevSeg) return prevSeg.ringOut\n\n      // if the two segments are of different rings, the ring of the prev\n      // segment must either loop around us or the ring of the prev prev\n      // seg, which would make us and the ring of the prev peers\n      if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\n        if (prevPrevSeg.ringOut.enclosingRing() !== prevSeg.ringOut) {\n          return prevSeg.ringOut\n        } else return prevSeg.ringOut.enclosingRing()\n      }\n\n      // two segments are from the same ring, so this was a penisula\n      // of that ring. iterate downward, keep searching\n      prevSeg = prevPrevSeg.prevInResult()\n      prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null\n    }\n  }\n}\n\nexport class PolyOut {\n  constructor (exteriorRing) {\n    this.exteriorRing = exteriorRing\n    exteriorRing.poly = this\n    this.interiorRings = []\n  }\n\n  addInterior (ring) {\n    this.interiorRings.push(ring)\n    ring.poly = this\n  }\n\n  getGeom () {\n    const geom = [this.exteriorRing.getGeom()]\n    // exterior ring was all (within rounding error of angle calc) colinear points\n    if (geom[0] === null) return null\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringGeom = this.interiorRings[i].getGeom()\n      // interior ring was all (within rounding error of angle calc) colinear points\n      if (ringGeom === null) continue\n      geom.push(ringGeom)\n    }\n    return geom\n  }\n}\n\nexport class MultiPolyOut {\n  constructor (rings) {\n    this.rings = rings\n    this.polys = this._composePolys(rings)\n  }\n\n  getGeom () {\n    const geom = []\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polyGeom = this.polys[i].getGeom()\n      // exterior ring was all (within rounding error of angle calc) colinear points\n      if (polyGeom === null) continue\n      geom.push(polyGeom)\n    }\n    return geom\n  }\n\n  _composePolys (rings) {\n    const polys = []\n    for (let i = 0, iMax = rings.length; i < iMax; i++) {\n      const ring = rings[i]\n      if (ring.poly) continue\n      if (ring.isExteriorRing()) polys.push(new PolyOut(ring))\n      else {\n        const enclosingRing = ring.enclosingRing()\n        if (!enclosingRing.poly) polys.push(new PolyOut(enclosingRing))\n        enclosingRing.poly.addInterior(ring)\n      }\n    }\n    return polys\n  }\n}\n","import SplayTree from 'splaytree'\nimport Segment from './segment'\nimport SweepEvent from './sweep-event'\n\n/**\n * NOTE:  We must be careful not to change any segments while\n *        they are in the SplayTree. AFAIK, there's no way to tell\n *        the tree to rebalance itself - thus before splitting\n *        a segment that's in the tree, we remove it from the tree,\n *        do the split, then re-insert it. (Even though splitting a\n *        segment *shouldn't* change its correct position in the\n *        sweep line tree, the reality is because of rounding errors,\n *        it sometimes does.)\n */\n\nexport default class SweepLine {\n  constructor (queue, comparator = Segment.compare) {\n    this.queue = queue\n    this.tree = new SplayTree(comparator)\n    this.segments = []\n  }\n\n  process (event) {\n    const segment = event.segment\n    const newEvents = []\n\n    // if we've already been consumed by another segment,\n    // clean up our body parts and get out\n    if (event.consumedBy) {\n      if (event.isLeft) this.queue.remove(event.otherSE)\n      else this.tree.remove(segment)\n      return newEvents\n    }\n\n    const node = event.isLeft\n      ? this.tree.insert(segment)\n      : this.tree.find(segment)\n\n    if (! node) throw new Error(\n      `Unable to find segment #${segment.id} ` +\n      `[${segment.leftSE.point.x}, ${segment.leftSE.point.y}] -> ` +\n      `[${segment.rightSE.point.x}, ${segment.rightSE.point.y}] ` +\n      'in SweepLine tree. Please submit a bug report.'\n    )\n\n    let prevNode = node\n    let nextNode = node\n    let prevSeg = undefined\n    let nextSeg = undefined\n\n    // skip consumed segments still in tree\n    while (prevSeg === undefined) {\n      prevNode = this.tree.prev(prevNode)\n      if (prevNode === null) prevSeg = null\n      else if (prevNode.key.consumedBy === undefined) prevSeg = prevNode.key\n    }\n\n    // skip consumed segments still in tree\n    while (nextSeg === undefined) {\n      nextNode = this.tree.next(nextNode)\n      if (nextNode === null) nextSeg = null\n      else if (nextNode.key.consumedBy === undefined) nextSeg = nextNode.key\n    }\n\n    if (event.isLeft) {\n\n      // Check for intersections against the previous segment in the sweep line\n      let prevMySplitter = null\n      if (prevSeg) {\n        const prevInter = prevSeg.getIntersection(segment)\n        if (prevInter !== null) {\n          if (!segment.isAnEndpoint(prevInter)) prevMySplitter = prevInter\n          if (!prevSeg.isAnEndpoint(prevInter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, prevInter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      // Check for intersections against the next segment in the sweep line\n      let nextMySplitter = null\n      if (nextSeg) {\n        const nextInter = nextSeg.getIntersection(segment)\n        if (nextInter !== null) {\n          if (!segment.isAnEndpoint(nextInter)) nextMySplitter = nextInter\n          if (!nextSeg.isAnEndpoint(nextInter))  {\n            const newEventsFromSplit = this._splitSafely(nextSeg, nextInter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      // For simplicity, even if we find more than one intersection we only\n      // spilt on the 'earliest' (sweep-line style) of the intersections.\n      // The other intersection will be handled in a future process().\n      if (prevMySplitter !== null || nextMySplitter !== null) {\n\n        let mySplitter = null\n        if (prevMySplitter === null) mySplitter = nextMySplitter\n        else if (nextMySplitter === null) mySplitter = prevMySplitter\n        else {\n          const cmpSplitters = SweepEvent.comparePoints(prevMySplitter, nextMySplitter)\n          if (cmpSplitters < 0) mySplitter = prevMySplitter\n          if (cmpSplitters > 0) mySplitter = nextMySplitter\n          // the two splitters are the exact same point\n          mySplitter = prevMySplitter\n        }\n\n        // Rounding errors can cause changes in ordering,\n        // so remove afected segments and right sweep events before splitting\n        this.queue.remove(segment.rightSE)\n        newEvents.push(segment.rightSE)\n\n        const newEventsFromSplit = segment.split(mySplitter)\n        for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n          newEvents.push(newEventsFromSplit[i])\n        }\n      }\n\n      if (newEvents.length > 0) {\n        // We found some intersections, so re-do the current event to\n        // make sure sweep line ordering is totally consistent for later\n        // use with the segment 'prev' pointers\n        this.tree.remove(segment)\n        newEvents.push(event)\n\n      } else {\n        // done with left event\n        this.segments.push(segment)\n        segment.prev = prevSeg\n      }\n\n    } else {\n      // event.isRight\n\n      // since we're about to be removed from the sweep line, check for\n      // intersections between our previous and next segments\n      if (prevSeg && nextSeg) {\n        const inter = prevSeg.getIntersection(nextSeg)\n        if (inter !== null) {\n          if (!prevSeg.isAnEndpoint(inter))  {\n            const newEventsFromSplit = this._splitSafely(prevSeg, inter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n          if (!nextSeg.isAnEndpoint(inter))  {\n            const newEventsFromSplit = this._splitSafely(nextSeg, inter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      this.tree.remove(segment)\n    }\n\n    return newEvents\n  }\n\n  /* Safely split a segment that is currently in the datastructures\n   * IE - a segment other than the one that is currently being processed. */\n  _splitSafely(seg, pt) {\n    // Rounding errors can cause changes in ordering,\n    // so remove afected segments and right sweep events before splitting\n    // removeNode() doesn't work, so have re-find the seg\n    // https://github.com/w8r/splay-tree/pull/5\n    this.tree.remove(seg)\n    const rightSE = seg.rightSE\n    this.queue.remove(rightSE)\n    const newEvents = seg.split(pt)\n    newEvents.push(rightSE)\n    // splitting can trigger consumption\n    if (seg.consumedBy === undefined) this.tree.insert(seg)\n    return newEvents\n  }\n}\n","import SplayTree from 'splaytree'\nimport * as cleanInput from './clean-input'\nimport * as geomIn from './geom-in'\nimport * as geomOut from './geom-out'\nimport rounder from './rounder'\nimport SweepEvent from './sweep-event'\nimport SweepLine from './sweep-line'\n\nexport class Operation {\n  run (type, geom, moreGeoms) {\n    operation.type = type\n    rounder.reset()\n\n    /* Make a copy of the input geometry with rounded points as objects */\n    const geoms = [cleanInput.pointsAsObjects(geom)]\n    for (let i = 0, iMax = moreGeoms.length; i < iMax; i++) {\n      geoms.push(cleanInput.pointsAsObjects(moreGeoms[i]))\n    }\n\n    /* Clean inputs */\n    for (let i = 0, iMax = geoms.length; i < iMax; i++) {\n      cleanInput.forceMultiPoly(geoms[i])\n      cleanInput.cleanMultiPoly(geoms[i])\n    }\n\n    /* Convert inputs to MultiPoly objects, mark subject */\n    const multipolys = []\n    for (let i = 0, iMax = geoms.length; i < iMax; i++) {\n      multipolys.push(new geomIn.MultiPolyIn(geoms[i]))\n    }\n    multipolys[0].markAsSubject()\n    operation.numMultiPolys = multipolys.length\n\n    /* Put segment endpoints in a priority queue */\n    const queue = new SplayTree(SweepEvent.compare)\n    for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n      const sweepEvents = multipolys[i].getSweepEvents()\n      for (let j = 0, jMax = sweepEvents.length; j < jMax; j++) {\n        queue.insert(sweepEvents[j])\n      }\n    }\n\n    /* Pass the sweep line over those endpoints */\n    const sweepLine = new SweepLine(queue)\n    let prevQueueSize = queue.size\n    let node = queue.pop()\n    while (node) {\n      const evt = node.key\n      if (queue.size === prevQueueSize) {\n        // prevents an infinite loop, an otherwise common manifestation of bugs\n        throw new Error(\n          `Unable to pop() SweepEvent [${evt.point.x}, ${evt.point.y}] from ` +\n          `segment #${evt.segment.id} from queue. Please file a bug report.`\n        )\n      }\n      const newEvents = sweepLine.process(evt)\n      for (let i = 0, iMax = newEvents.length; i < iMax; i++) {\n        const evt = newEvents[i]\n        if (evt.consumedBy === undefined) queue.insert(evt)\n      }\n      prevQueueSize = queue.size\n      node = queue.pop()\n    }\n\n    // free some memory we don't need anymore\n    rounder.reset()\n\n    /* Collect and compile segments we're keeping into a multipolygon */\n    const ringsOut = geomOut.RingOut.factory(sweepLine.segments)\n    const result = new geomOut.MultiPolyOut(ringsOut)\n    return result.getGeom()\n  }\n}\n\n// singleton available by import\nconst operation = new Operation()\n\nexport default operation\n","import operation from './operation'\n\nconst union = (geom, ...moreGeoms) =>\n  operation.run('union', geom, moreGeoms)\n\nconst intersection = (geom, ...moreGeoms) =>\n  operation.run('intersection', geom, moreGeoms)\n\nconst xor = (geom, ...moreGeoms) =>\n  operation.run('xor', geom, moreGeoms)\n\nconst difference = (subjectGeom, ...clippingGeoms) =>\n  operation.run('difference', subjectGeom, clippingGeoms)\n\nexport default {\n  union: union,\n  intersection: intersection,\n  xor: xor,\n  difference: difference,\n}\n"],"names":["Node","key","data","left","right","DEFAULT_COMPARE","a","b","splay","i","t","comparator","l","r","y","N","cmp","insert","tree","node","_size","remove","x","split","v","Tree","_comparator","_root","this","add","current","compare","visitor","ctx","Q","done","push","length","pop","call","low","high","fn","keys","forEach","values","minNode","maxNode","index","d","root","successor","predecessor","head","next","p","toList","presort","size","sort","pivot","j","tmp","loadRecursive","parent","start","end","middle","Math","floor","mergedList","l1","l2","p1","p2","mergeLists","createList","sortedListToBST","list","printNode","n","out","printRow","prefix","isTail","indent","join","newKey","newData","merge","epsilon","Number","EPSILON","undefined","pow","EPSILON_SQ","touch","m","touchPoints","aPt","bPt","mx","my","aYMiss","crossProduct","dotProduct","compareVectorAngles","basePt","endPt1","endPt2","v1","v2","kross","sqrt","cosineOfAngle","pShared","pBase","pAngle","vBase","vAngle","closestPoint","ptA1","ptA2","ptB","nearPt","farPt","vA","vB","dist","horizontalIntersection","pt","verticalIntersection","PtRounder","reset","xRounder","CoordRounder","yRounder","round","SplayTree","coord","prevNode","prev","nextNode","rounder","pointsAsObjects","geom","output","Array","isArray","Error","iMax","jMax","k","kMax","forceMultiPoly","unshift","splice","cleanMultiPoly","multipoly","poly","exteriorRing","cleanRing","interiorRing","ring","firstPt","lastPt","prevPt","nextPt","isPointUncessary","SweepEvent","point","isLeft","events","ptCmp","comparePoints","link","Segment","segment","other","otherEvents","evt","checkForConsuming","numEvents","evt1","consumedBy","evt2","otherSE","consume","ringOut","isInResult","baseEvent","cache","Map","fillCache","linkedEvent","nextEvent","set","sine","_this","cosine","has","get","asine","acosine","bsine","bcosine","segmentId","leftSE","rightSE","ringsIn","id","_cache","alx","blx","arx","brx","aly","bly","ary","bry","aCmpBLeft","comparePoint","bCmpARight","bCmpALeft","aCmpBRight","newRightSE","y1","y2","ll","ur","isAnEndpoint","interPt","bbox","touchesBbox","cPt1","avgPt1","bboxOverlap","b1","b2","lowerX","upperX","getBboxOverlap","touchesOtherLSE","touches","touchesThisLSE","touchesOtherRSE","touchesThisRSE","pt1","pt2","ve","d1","d2","intersection","vector","newEvents","alreadyLinked","newLeftSE","oldRightSE","replaceRightSE","slice","consumer","consumee","prevInResult","ringsAfter","rings","ringsBefore","indexOf","multiPolysAfter","polysAfter","polysExclude","isExterior","mps","mp","multiPoly","mpsBefore","multiPolysBefore","mpsAfter","operation","type","least","most","numMultiPolys","abs","isJustSubject","isSubject","leftPt","rightPt","cmpPts","RingIn","geomRing","segments","prevPoint","fromRing","sweepEvents","PolyIn","geomPoly","interiorRings","getSweepEvents","ringSweepEvents","MultiPolyIn","geomMultiPoly","polys","polySweepEvents","RingOut","allSegments","ringsOut","prevEvent","event","startingPoint","intersectionLEs","availableLEs","getAvailableLinkedEvents","indexLE","getLeftmostComparator","intersectionLE","ringEvents","reverse","points","shift","step","isExteriorRing","iStart","iEnd","orderedPoints","_isExteriorRing","enclosing","enclosingRing","_enclosingRing","_calcEnclosingRing","leftMostEvt","prevSeg","prevPrevSeg","PolyOut","getGeom","ringGeom","MultiPolyOut","_composePolys","polyGeom","addInterior","SweepLine","queue","find","nextSeg","prevMySplitter","prevInter","getIntersection","newEventsFromSplit","_splitSafely","nextMySplitter","nextInter","mySplitter","cmpSplitters","inter","seg","moreGeoms","geoms","cleanInput","multipolys","geomIn","markAsSubject","sweepLine","prevQueueSize","process","geomOut","factory","union","run","xor","difference","subjectGeom","clippingGeoms"],"mappings":"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"}